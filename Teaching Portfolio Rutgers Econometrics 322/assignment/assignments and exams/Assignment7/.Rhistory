setwd("~/Downloads/RClassDemo8a_Heterskedasticity_simple version 2")
CASchools <- read.csv("CASchoolsData.csv", header=TRUE, sep=",")
head(CASchools)
y = CASchools$test_score
X = CASchools$STR
n = length(y)
intercept = rep(1,n)
X = cbind(intercept,X)
### Matrix method
y = CASchools$test_score
X = CASchools$STR
n = length(y)
intercept = rep(1,n)
X = cbind(intercept,X)
X = as.matrix(X)
y = as.matrix(y)
X
y
betaOLS = solve( t(X) %*% X ) %*% t(X) %*% y
betaOLS
SSR = t(y- X %*%betaOLS )%*% (y- X %*%betaOLS )
SigmaSquared_Hat = SSR/ (n-1-1)
SSR = t(y- X %*%betaOLS )%*% (y- X %*%betaOLS )
SigmaSquared_Hat = SSR/ (n-1-1)
SigmaSquared_Hat = as.numeric(SigmaSquared_Hat)
VarCovMatrixBetaOLS = SigmaSquared_Hat * solve(t(X) %*% X)
VarCovMatrixBetaOLS
VarBetaOLS = diag(VarCovMatrixBetaOLS)
sdBetaOLS = sqrt(VarBetaOLS)
sdBetaOLS
betaOLS
sdBetaOLS
# Compute the Residuals
Residual = y- X %*%betaOLS
# Heterskedasticity
Squared_Residual = Residual*Residual
Squared_Residual
# Run OLS regression of Squared Residual onto X
alphaOLS_SquaredResidual = solve( t(X) %*% X ) %*% t(X) %*% Squared_Residual
Squared_Residual_Hat = X %*% alphaOLS_SquaredResidual
Squared_Residual_Hat
Squared_Residual_Hat_vector = as.vector(Squared_Residual_Hat)
diag( Squared_Residual_Hat_vector )
Squared_Residual_Hat_vector = as.vector(Squared_Residual_Hat)
Lambda_hat = diag( Squared_Residual_Hat_vector )
Lambda_hat
beta_WLS = solve( t(X) %*% solve(Lambda_hat) %*% X ) %*% t(X)%*% solve(Lambda_hat)  %*% y
beta_WLS
betaOLS
betaOLS
VarCovMatrixBetaOLS
Squared_Residual
# OLS estimator
beta_OLS = solve( t(X) %*% X ) %*% t(X) %*% y
beta_OLS
Var_Cov_beta_OLS_HR = solve( t(X) %*% X ) %*% t(X) %*% Lambda_hat %*% X %*% solve( t(X) %*% X )
Var_Cov_beta_OLS_HR
Var_Cov_beta_OLS_HR = solve( t(X) %*% X ) %*% t(X) %*% Lambda_hat %*% X %*% solve( t(X) %*% X )
Var_beta_OLS_HR = diag(Var_Cov_beta_OLS_HR) # Hetero-Rubust variance for beta_OLS
sd_beta_OLS_HR = sqrt(Var_beta_OLS_HR)
sd_beta_OLS_HR
sdBetaOLS
sd_beta_OLS_HR
SSR = t(y- X %*%betaOLS )%*% (y- X %*%betaOLS )
SigmaSquared_Hat = SSR/ (n-1-1)
SigmaSquared_Hat = as.numeric(SigmaSquared_Hat)
Var_Cov_beta_OLS = SigmaSquared_Hat * solve(t(X) %*% X)
Var_beta_OLS_Homo = diag(Var_Cov_beta_OLS) # Homo variance for beta_OLS
sd_beta_OLS_Homo = sqrt(Var_beta_OLS_Homo)      # Homo sd for beta_OLS
sd_beta_OLS_Homo
sd_beta_WLS       # smallest due to the fact it is sharpe estimator
sd_beta_OLS_HR
sd_beta_OLS_Homo
#########################################################
# Variance Covariance Matrix for the Uncertainty u
Squared_Residual_Hat_vector = as.vector(Squared_Residual_Hat)
Lambda_hat = diag( Squared_Residual_Hat_vector )
# WLS estimator
beta_WLS = solve( t(X) %*% solve(Lambda_hat) %*% X ) %*% t(X)%*% solve(Lambda_hat)  %*% y
beta_WLS
betaOLS # Note: OLS estimator is solve( t(X) %*% X ) %*% t(X) %*% y
# Variance Covariance Matrix for WLS estimator
Var_Cov_beta_WLS = solve( t(X) %*% solve(Lambda_hat) %*% X )
Var_beta_WLS = diag(Var_Cov_beta_WLS)
sd_beta_WLS = sqrt(Var_beta_WLS)
sd_beta_WLS
sd_beta_WLS       # smallest due to the fact it is sharpe estimator
sd_beta_OLS_HR
sd_beta_OLS_Homo
sd_beta_OLS_HR
linearMod <- lm(test_score ~ STR, data=CASchools)
summary(linearMod)
summary(linearMod)$coef
coeftest(linearMod, vcov. = vcovHC, type = "const")  # Homoskedasticity Using Software Package
sd_beta_OLS_Homo
linearMod <- lm(test_score ~ STR, data=CASchools)
summary(linearMod)
summary(linearMod)$coef
coeftest(linearMod, vcov. = vcovHC, type = "const")  # Homoskedasticity Using Software Package
sd_beta_OLS_Homo
library(AER)
linearMod <- lm(test_score ~ STR, data=CASchools)
summary(linearMod)
summary(linearMod)$coef
coeftest(linearMod, vcov. = vcovHC, type = "const")  # Homoskedasticity Using Software Package
sd_beta_OLS_Homo # Hom
coeftest(linearMod, vcov. = vcovHC, type = "const")  # Homoskedasticity Using Software Package
sd_beta_OLS_Homo # Homoskedasticity Using Matrix
coeftest(linearMod, vcov. = vcovHC, type = "HC0")  # Heteroskedasticity Robust Using Software Package
sd_beta_OLS_HR
linearMod <- lm(test_score ~ STR, data=CASchools)
summary(linearMod)
summary(linearMod)$coef
coeftest(linearMod, vcov. = vcovHC, type = "const")  # Homoskedasticity Using Software Package
sd_beta_OLS_Homo # Homoskedasticity Using Matrix
coeftest(linearMod, vcov. = vcovHC, type = "HC0")  # Heteroskedasticity Robust Using Software Package
sd_beta_OLS_HR
# Variance Covariance Matrix for the Uncertainty u
Squared_Residual_vector = as.vector(Squared_Residual)
Lambda_hat = diag( Squared_Residual_vector )
# OLS estimator
beta_OLS = solve( t(X) %*% X ) %*% t(X) %*% y
beta_OLS
# Variance Covariance Matrix for OLS estimator under Heteroskedasticity
# Same thing as the Heteroskedasticity-Robust Variance Covariance Matrix
# Same thing as Heteroskedasticity-consistent Variance Covariance Matrix
Var_Cov_beta_OLS_HR = solve( t(X) %*% X ) %*% t(X) %*% Lambda_hat %*% X %*% solve( t(X) %*% X )
Var_beta_OLS_HR = diag(Var_Cov_beta_OLS_HR) # Hetero-Rubust variance for beta_OLS
sd_beta_OLS_HR = sqrt(Var_beta_OLS_HR)      # Hetero-Rubust sd for beta_OLS
sd_beta_OLS_HR
# Variance Covariance Matrix for the Uncertainty u
Squared_Residual_vector = as.vector(Squared_Residual)
Lambda_hat = diag( Squared_Residual_vector )
# OLS estimator
beta_OLS = solve( t(X) %*% X ) %*% t(X) %*% y
beta_OLS
# Variance Covariance Matrix for OLS estimator under Heteroskedasticity
# Same thing as the Heteroskedasticity-Robust Variance Covariance Matrix
# Same thing as Heteroskedasticity-consistent Variance Covariance Matrix
Var_Cov_beta_OLS_HR = solve( t(X) %*% X ) %*% t(X) %*% Lambda_hat %*% X %*% solve( t(X) %*% X )
Var_beta_OLS_HR = diag(Var_Cov_beta_OLS_HR) # Hetero-Rubust variance for beta_OLS
sd_beta_OLS_HR = sqrt(Var_beta_OLS_HR)      # Hetero-Rubust sd for beta_OLS
sd_beta_OLS_HR
sd_beta_OLS_HR
coeftest(linearMod, vcov. = vcovHC, type = "HC0")  # Heteroskedasticity Robust Using Software Package
sd_beta_OLS_HR
setwd("~/Dropbox/Econometrics  R Emprical Analysis/assignment/Assignment7")
df <- read.csv("A7.csv")
head(df)
X = df[ , c(2,3,4,5)]
n = nrow(df)
intercept = rep(1,nrow(df))
X = cbind(intercept,X)
X = as.matrix(X)
y = as.matrix(y)
betaOLS = solve( t(X) %*% X ) %*% t(X) %*% y
round(betaOLS, digits = 3)
y = df[, 1]
X = df[ , c(2,3,4,5)]
n = nrow(df)
intercept = rep(1,nrow(df))
X = cbind(intercept,X)
X = as.matrix(X)
y = as.matrix(y)
#Q3
betaOLS = solve( t(X) %*% X ) %*% t(X) %*% y
round(betaOLS, digits = 3)
#Q4
uhat = y- X %*%betaOLS
SSR = t(y- X %*%betaOLS )%*% (y- X %*%betaOLS )
sigmasqaureHat = SSR/ (n-4-1)
sigmasqaureHat = as.numeric(sigmasqaureHat)
round(sigmasqaureHat, digits = 3)
#Q5
VarCovMatrixBetaOLS = sigmasqaureHat * solve(t(X) %*% X)
VarBetaOLS = diag(VarCovMatrixBetaOLS)
sdBetaOLS = sqrt(VarBetaOLS)
round(sdBetaOLS,digits = 3)
b = 2 #null hypothesis
i = 3 # the beta_2
t = (betaOLS[i]-b)/sdBetaOLS[i]
round(t, digits = 3)
betaOLS
deg
n-p-1
i = 3
p = 4
deg = n-p-1
cv = qt(0.95,deg)
left = betaOLS[i]  - cv*sdBetaOLS[i]
right = betaOLS[i]  + cv*sdBetaOLS[i]
CI90 = c(left,right)
round(CI90, digits = 3)
setwd("~/Dropbox/Econometrics  R Emprical Analysis/assignment/Assignment7")
df <- read.csv("A7.csv")
head(df)
y = df[, 1]
X = df[ , c(2,3,4,5)]
n = nrow(df)
intercept = rep(1,nrow(df))
X = cbind(intercept,X)
X = as.matrix(X)
y = as.matrix(y)
#Q3
betaOLS = solve( t(X) %*% X ) %*% t(X) %*% y
round(betaOLS, digits = 3)
#Q4
uhat = y- X %*%betaOLS
SSR = t(y- X %*%betaOLS )%*% (y- X %*%betaOLS )
sigmasqaureHat = SSR/ (n-4-1)
sigmasqaureHat = as.numeric(sigmasqaureHat)
round(sigmasqaureHat, digits = 3)
#Q5
VarCovMatrixBetaOLS = sigmasqaureHat * solve(t(X) %*% X)
VarBetaOLS = diag(VarCovMatrixBetaOLS)
sdBetaOLS = sqrt(VarBetaOLS)
round(sdBetaOLS,digits = 3)
# Check the Code Using Third Party Package
linearMod2 <- lm(y ~ x1+x2+x3+x4, data=df)
summary(linearMod2)
summary(linearMod2)$coef
round(betaOLS, digits = 3)
round(sdBetaOLS,digits = 3)
betaOLS
betaOLS[3]
sdBetaOLS
t = ( betaOLS[3] - 2) / sdBetaOLS[3]
round(t,3 )
betaOLS
pt (- abs(t),deg)
t = ( betaOLS[3] - 2) / sdBetaOLS[3]
# cdf(-abs(t) )
n = nrow(y)
p = 4
deg = n-p-1
pt (- abs(t),deg)
pvalue = 2 * pt (- abs(t),deg)
round(pvalue,3 )
pvalue = 1 - pt(abs(t),deg ) +  pt (- abs(t),deg)
round(pvalue,3 )
