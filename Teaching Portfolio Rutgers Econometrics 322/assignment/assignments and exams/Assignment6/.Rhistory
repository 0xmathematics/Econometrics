q1 = pnorm( -3 ,mu, sd )
round(q1,digits = 4)
# The underlying population follows f(df1, df2)
#df1 = 8
#df2 = 6
N = 10000000
df1 = 5
df2 = 5 # df2 should be great 2 otherwise theoretical expectation does not exist
# if df2 less than 5, theoretical variance does not exist
# randomly generate N samples from the underlying population
X = rf(N, df1, df2)
E = df2/(df2-2)# Theoretical Expectation for  f  Distribution
Var =2*df2^2*(df1+df2-2)/(df1*(df2-2)^2*(df2-4)) # Theoretical Expectation for Binomial Distribution
sd = sqrt(Var) # Theoretical standard deviation
# draw the histogram of N samples randomly draw
# from the underlying population distribution f(df1, df2)
hist(X,
col = "steelblue" ,
freq = FALSE,
breaks = 5000,
xlim= c(0,20),
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
# draw the the underlying population distribution f(df1, df2)
x = seq(range(X)[1], range(X)[2], by = diff(range(X))/50 )
curve(df(x,df1,df2),
col = "red",
lwd = "2",
add = TRUE)
legend("topright",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
### small Sample and Large Sample
Sample_Size = c(2, 100000 )
### number of repetition
reps = 2000
###
#i=1 #small sample
#i=2 #large sample
i=2
## Conduct reps (2000) times of following experiment:
## each time draw sample_Size  many of samples from underlying population
## samples is a matrix with dimension Sample_Size*reps
samples <- replicate(reps, sample(X,size = Sample_Size[i],replace = FALSE, prob = NULL) )
## calculate the sample mean for each iteration
sample_Means <- colMeans(samples)
# Plot the density histogram for Sample Means of reps many of repetitions
hist(sample_Means,
col = "steelblue" ,
freq = FALSE,
breaks = 200,
main = 'Sample Mean Histogram and Normal Distribution',cex.main=0.75)
# draw the convergent Normal(E, Var)
x = seq(range(sample_Means)[1], range(sample_Means)[2], by = diff(range(sample_Means))/50 )
curve(dnorm(x, mean = E, sd = sd/sqrt(Sample_Size[i])),
col = "red",
lwd = "2",
add = TRUE)
legend("topleft",c("Sample Mean Histogram","Normal Distribution"),fill=c("steelblue","red"),cex = 0.5 )
# Plot the Normalized Sample Mean together with Standard Normal Distribution
# Normalize Sample mean
Nsample_Means = (sample_Means-E)/(sd/sqrt(Sample_Size[i]))
# Plot the density histogram for Sample Means of reps many of repetitions
hist(Nsample_Means,
col = "steelblue" ,
freq = FALSE,
breaks = 200,
xlab = 'Normalized Sample Mean',
main = 'Normalized Sample Mean Histogram and Standard Normal Distribution',cex.main=0.75)
# draw the standard Normal Distribution
curve(dnorm(x, mean = 0, sd = 1),
col = "red",
lwd = "2",
add = TRUE)
legend("topleft",c("Sample Mean Histogram","Normal Distribution"),fill=c("steelblue","red"),cex = 0.5 )
################################
# F Distribution
################################
# The underlying population follows f(df1, df2)
#df1 = 8
#df2 = 6
N = 10000000
df1 = 5
df2 = 5 # df2 should be great 2 otherwise theoretical expectation does not exist
# if df2 less than 5, theoretical variance does not exist
# randomly generate N samples from the underlying population
X = rf(N, df1, df2)
E = df2/(df2-2)# Theoretical Expectation for  f  Distribution
Var =2*df2^2*(df1+df2-2)/(df1*(df2-2)^2*(df2-4)) # Theoretical Expectation for Binomial Distribution
sd = sqrt(Var) # Theoretical standard deviation
# draw the histogram of N samples randomly draw
# from the underlying population distribution f(df1, df2)
hist(X,
col = "steelblue" ,
freq = FALSE,
breaks = 5000,
xlim= c(0,20),
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
# draw the the underlying population distribution f(df1, df2)
x = seq(range(X)[1], range(X)[2], by = diff(range(X))/50 )
curve(df(x,df1,df2),
col = "red",
lwd = "2",
add = TRUE)
legend("topright",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
### small Sample and Large Sample
Sample_Size = c(2, 100000 )
### number of repetition
reps = 2000
###
#i=1 #small sample
#i=2 #large sample
i=1
## Conduct reps (2000) times of following experiment:
## each time draw sample_Size  many of samples from underlying population
## samples is a matrix with dimension Sample_Size*reps
samples <- replicate(reps, sample(X,size = Sample_Size[i],replace = FALSE, prob = NULL) )
## calculate the sample mean for each iteration
sample_Means <- colMeans(samples)
# Plot the density histogram for Sample Means of reps many of repetitions
hist(sample_Means,
col = "steelblue" ,
freq = FALSE,
breaks = 200,
main = 'Sample Mean Histogram and Normal Distribution',cex.main=0.75)
# draw the convergent Normal(E, Var)
x = seq(range(sample_Means)[1], range(sample_Means)[2], by = diff(range(sample_Means))/50 )
curve(dnorm(x, mean = E, sd = sd/sqrt(Sample_Size[i])),
col = "red",
lwd = "2",
add = TRUE)
legend("topleft",c("Sample Mean Histogram","Normal Distribution"),fill=c("steelblue","red"),cex = 0.5 )
# Plot the Normalized Sample Mean together with Standard Normal Distribution
# Normalize Sample mean
Nsample_Means = (sample_Means-E)/(sd/sqrt(Sample_Size[i]))
# Plot the density histogram for Sample Means of reps many of repetitions
hist(Nsample_Means,
col = "steelblue" ,
freq = FALSE,
breaks = 200,
xlab = 'Normalized Sample Mean',
main = 'Normalized Sample Mean Histogram and Standard Normal Distribution',cex.main=0.75)
# draw the standard Normal Distribution
curve(dnorm(x, mean = 0, sd = 1),
col = "red",
lwd = "2",
add = TRUE)
legend("topleft",c("Sample Mean Histogram","Normal Distribution"),fill=c("steelblue","red"),cex = 0.5 )
E
Var
sd
# The underlying population follows f(df1, df2)
#df1 = 8
#df2 = 6
N = 10000000
df1 = 5
df2 = 5 # df2 should be great 2 otherwise theoretical expectation does not exist
# if df2 less than 5, theoretical variance does not exist
# randomly generate N samples from the underlying population
X = rf(N, df1, df2)
E = df2/(df2-2)# Theoretical Expectation for  f  Distribution
Var =2*df2^2*(df1+df2-2)/(df1*(df2-2)^2*(df2-4)) # Theoretical Expectation for Binomial Distribution
sd = sqrt(Var) # Theoretical standard deviation
# draw the histogram of N samples randomly draw
# from the underlying population distribution f(df1, df2)
hist(X,
col = "steelblue" ,
freq = FALSE,
breaks = 5000,
xlim= c(0,20),
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
# draw the the underlying population distribution f(df1, df2)
x = seq(range(X)[1], range(X)[2], by = diff(range(X))/50 )
curve(df(x,df1,df2),
col = "red",
lwd = "2",
add = TRUE)
legend("topright",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
### small Sample and Large Sample
Sample_Size = c(2, 100000 )
### number of repetition
reps = 2000
###
#i=1 #small sample
#i=2 #large sample
i=2
## Conduct reps (2000) times of following experiment:
## each time draw sample_Size  many of samples from underlying population
## samples is a matrix with dimension Sample_Size*reps
samples <- replicate(reps, sample(X,size = Sample_Size[i],replace = FALSE, prob = NULL) )
# The underlying population follows f(df1, df2)
#df1 = 8
#df2 = 6
N = 10000000
df1 = 5
df2 = 5 # df2 should be great 2 otherwise theoretical expectation does not exist
# if df2 less than 5, theoretical variance does not exist
# randomly generate N samples from the underlying population
X = rf(N, df1, df2)
E = df2/(df2-2)# Theoretical Expectation for  f  Distribution
Var =2*df2^2*(df1+df2-2)/(df1*(df2-2)^2*(df2-4)) # Theoretical Expectation for Binomial Distribution
sd = sqrt(Var) # Theoretical standard deviation
# draw the histogram of N samples randomly draw
# from the underlying population distribution f(df1, df2)
hist(X,
col = "steelblue" ,
freq = FALSE,
breaks = 5000,
xlim= c(0,20),
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
# draw the the underlying population distribution f(df1, df2)
x = seq(range(X)[1], range(X)[2], by = diff(range(X))/50 )
curve(df(x,df1,df2),
col = "red",
lwd = "2",
add = TRUE)
legend("topright",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
### small Sample and Large Sample
Sample_Size = c(2, 100000 )
### number of repetition
reps = 2000
###
#i=1 #small sample
#i=2 #large sample
i=2
## Conduct reps (2000) times of following experiment:
## each time draw sample_Size  many of samples from underlying population
## samples is a matrix with dimension Sample_Size*reps
samples <- replicate(reps, sample(X,size = Sample_Size[i],replace = FALSE, prob = NULL) )
## calculate the sample mean for each iteration
sample_Means <- colMeans(samples)
# Plot the density histogram for Sample Means of reps many of repetitions
hist(sample_Means,
col = "steelblue" ,
freq = FALSE,
breaks = 200,
main = 'Sample Mean Histogram and Normal Distribution',cex.main=0.75)
# draw the convergent Normal(E, Var)
x = seq(range(sample_Means)[1], range(sample_Means)[2], by = diff(range(sample_Means))/50 )
curve(dnorm(x, mean = E, sd = sd/sqrt(Sample_Size[i])),
col = "red",
lwd = "2",
add = TRUE)
legend("topleft",c("Sample Mean Histogram","Normal Distribution"),fill=c("steelblue","red"),cex = 0.5 )
# Plot the Normalized Sample Mean together with Standard Normal Distribution
# Normalize Sample mean
Nsample_Means = (sample_Means-E)/(sd/sqrt(Sample_Size[i]))
# Plot the density histogram for Sample Means of reps many of repetitions
hist(Nsample_Means,
col = "steelblue" ,
freq = FALSE,
breaks = 200,
xlab = 'Normalized Sample Mean',
main = 'Normalized Sample Mean Histogram and Standard Normal Distribution',cex.main=0.75)
# draw the standard Normal Distribution
curve(dnorm(x, mean = 0, sd = 1),
col = "red",
lwd = "2",
add = TRUE)
legend("topleft",c("Sample Mean Histogram","Normal Distribution"),fill=c("steelblue","red"),cex = 0.5 )
# The underlying population follows Binomial(n,p)
N = 10000000
n_Trials = 40
p = 0.2
# randomly generate N samples from the underlying population
X = rbinom(n=N, size = n_Trials, prob=p)
E = n_Trials*p # Theoretical Expectation for Binomial Distribution
Var = n_Trials*p*(1-p) # Theoretical Expectation for Binomial Distribution
#sd = as.integer(sqrt(Var)) # Theoretical standard deviation
sd = sqrt(Var) # Theoretical standard deviation
# draw the histogram of N samples randomly draw
# from the underlying population distribution Normal(mu, sigma^2)
hist(X,
col = "steelblue" ,
prob = FALSE,
breaks = seq(0,n_Trials,1),
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
# draw the the underlying population distribution Binomial(n,p)
x = seq(0,n_Trials,1)
lines(x,dbinom(x,n_Trials,p)* N ,col="red")
legend("topright",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
pnorm(0)
50%
qnorm(0.5)
qnorm(0.9)
qnorm(0.01)
qnorm(0.05)
qnorm(0.10)
qnorm(0.95)
qnorm(0.975)
qnorm(0.995)
4.8/n
n =1000
var = 4.8
q40 = var/n
round(q40,3 )
4.8/1000
n =1000
var = 4.8
q44 = var/n
4.8/1000
round(q44,3 )
Q20 = dnorm(0,5,3)
round(Q20,3 )
Q20 = dnorm(0,5,9)
round(Q20,3 )
Q20 = dnorm(0,5,3)
round(Q20,3 )
Q25 = pnorm(6,5,3) - pnorm(5,5,3)
round(Q25,3 )
Q27 = qnorm(0.75,5,3)
round(Q27,3 )
var = 4.8
n = 1000
Q44 = var / n
round(Q44,3 )
Q49 = qnorm(0.99, 0,1 )
round(Q49,3 )
c(1,2,3,4)
matrix(c(1,2,3,4),nrow = 2, ncol = 2)
matrix(c(1,2,3,4),nrow = 2, ncol = 2, byrow = TRUE)
A = matrix(c(1,2,3,4),nrow = 2, ncol = 2, byrow = TRUE)
A
B = matrix(c(1,2,3,1,2,3),nrow = 2, ncol = 3, byrow = TRUE)
B
C = matrix(c(1,2,3,4,5,6),nrow = 3, ncol = 2, byrow = FALSE)
C
A %*% B
A
C
A %*% C
D = matrix(c(1,2,1,2),nrow = 2, ncol = 2, byrow = TRUE)
D
A = matrix(c(1,2,3,4),nrow = 2, ncol = 2, byrow = TRUE)
A
A_inv = solve(A)
A_inv
A %*% A_inv
10^{-16}
solve(D)
A
t(A)
D
t(D)
dbinom(3, 5, .9)
X = matrix( c(1,1,1,1,0,1,2,3),nrow=4,ncol=2,byrow = FALSE)
X
y = c(4,1,0,1)
y
y = matrix( c(4,1,0,1),nrow=4,ncol=1,byrow = FALSE)
y
X
t(X)
t(X) %*% X
solve( t(X) %*% X )
solve( t(X) %*% X ) %*% t(X)
solve( t(X) %*% X ) %*% t(X) %*% y
beta_ols = solve( t(X) %*% X ) %*% t(X) %*% y
beta_ols
Q8 = pbinom(4, 5, 0.9  )
round(Q8,3 )
Q8 = pbinom(4, 5, 0.9  )
round(Q8,3 )
Q49 = qnorm(0.99 )
round(Q49,3 )
dbinom(3, 5, 0.9  )
dbinom(3, 5, 0.9  )
pbinom(3, 5, 0.9 )
Q10 = dbinom(3, 5, 0.9  ) + dbinom(4, 5, 0.9  ) + dbinom(5, 5, 0.9  )
round(Q10,3 )
Q10 = 1- pbinom(3, 5, 0.9 ) + dbinom(3, 5, 0.9  )
round(Q10,3 )
round(Q8,3 )
Q5 = 30/1000+ 40/1000
round(Q5,3 )
Q5 = sqrt(30/1000+ 40/1000)
round(Q5,3 )
Q5 = 30/1000+ 40/2000
round(Q5,3 )
setwd("~/Downloads")
df_x = read.csv('Assignment5_X.csv' )
df_x
df_y = read.csv('Assignment5_Y.csv' )
df_y
length(df_x)
df_x
X = df_x[,1]
X
Y = df_y[,1]
Y
length(X)
m = length(Y)
m
n = length(X)
m = length(Y)
X_bar = mean( X)
Y_bar = mean( Y)
mean_diff = X_bar- Y_bar
mean_diff
mean_diff = X_bar- Y_bar
var_mean_diff = 30/n + 40/m
z_stat = (mean_diff - 0)/sqrt( var_mean_diff)
rount(z_stat,3 )
mean_diff = X_bar- Y_bar
var_mean_diff = 30/n + 40/m
z_stat = (mean_diff - 0)/sqrt( var_mean_diff)
round(z_stat,3 )
critical_value = qnorm( 1-alpha/2 )
left = mean_diff - sqrt( var_mean_diff) * critical_value
right = mean_diff + sqrt( var_mean_diff) * critical_value
round( c(left,right),3  )
alpha = 0.05
critical_value = qnorm( 1-alpha/2 )
left = mean_diff - sqrt( var_mean_diff) * critical_value
right = mean_diff + sqrt( var_mean_diff) * critical_value
round( c(left,right),3  )
setwd("~/Downloads/RClassDemo6_Linear_Regression (2)")
dtibble <- read_excel("cps08.xlsx", col_types = "numeric")
df = data.frame(dtibble)
head(df)
nrow(df)
library('readxl')
dtibble <- read_excel("cps08.xlsx", col_types = "numeric")
df = data.frame(dtibble)
head(df)
nrow(df)
intercept = rep(1,n)
intercept
y = df$ahe
y = df[,1]
X = df[ , c(3,4,5)]
n = nrow(df)
intercept = rep(1,n)
intercept
X = cbind(intercept,X)
X
X = as.matrix(X)
y = as.matrix(y)
setwd("~/Downloads")
setwd("~/Dropbox/Econometrics  R Emprical Analysis/assignment/Assignment6")
df <- read.csv("A6.csv")
head(df)
setwd("~/Dropbox/Econometrics  R Emprical Analysis/assignment/Assignment6")
df <- read.csv("A6.csv")
head(df)
y = df[, 1]
X = df[ , c(2,3,4,5)]
n = nrow(df)
intercept = rep(1,nrow(df))
X = cbind(intercept,X)
X = as.matrix(X)
y = as.matrix(y)
betaOLS = solve( t(X) %*% X ) %*% t(X) %*% y
round(betaOLS, digits = 3)
uhat = y- X %*%betaOLS
SSR = t(y- X %*%betaOLS )%*% (y- X %*%betaOLS )
sigmasqaureHat = SSR/ (n-4-1)
sigmasqaureHat = as.numeric(sigmasqaureHat)
round(sigmasqaureHat, digits = 3)
VarCovMatrixBetaOLS = sigmasqaureHat * solve(t(X) %*% X)
VarBetaOLS = diag(VarCovMatrixBetaOLS)
sdBetaOLS = sqrt(VarBetaOLS)
round(sdBetaOLS, digits = 3)
b = 0 #null hypothesis
z = (betaOLS[2]-b)/sdBetaOLS[2]
round(z, digits = 3)
#Q10
Q10 = qnorm(.995)
round(Q10, digits = 3)
#Q12
Q12 = 2*pnorm(-abs(z))
round(Q12, digits = 3)
# multiple regression
linearMod2 <- lm(y ~ x1+x2+x3+x4, data=df)
summary(linearMod2)
summary(linearMod2)$coef
betaOLS
sdBetaOLS
#Q12
Q12 = 2*pnorm(-abs(z))
round(Q12, digits = 3)
cv = qnorm(0.995)
cv = qt(0.995,n-1-4)
cv
cv
i = 2
# estimator +_ cv * sd(estimator)
cv = qnorm(0.995)
#cv = qt(0.995,n-1-4)
left = betaOLS[i]  - cv*sdBetaOLS[i]
right = betaOLS[i]  + cv*sdBetaOLS[i]
CI99 = c(left,right)
round(CI99, digits = 3)
uhat = y- X %*%betaOLS
t(uhat)%*% (uhat )
t(y- X %*%betaOLS )%*% (y- X %*%betaOLS )
SSR = t(y- X %*%betaOLS )%*% (y- X %*%betaOLS )
SSR = t(uhat)%*% (uhat )
sigmasqaureHat = SSR/ (n-4-1)
sigmasqaureHat
sigmasqaureHat = as.numeric(sigmasqaureHat)
sigmasqaureHat
round(sigmasqaureHat, digits = 3)
betaOLS
b = 0 #null hypothesis
z = (betaOLS[2]-b)/sdBetaOLS[2]
round(z, digits = 3)
qt(0.995,n-1-4)
qnorm(0.995)
qnorm(0.995)
qt(0.995,n-1-4)
50 -30 -1
n-1-4
qt(0.995,40)
qnorm(0.995)
