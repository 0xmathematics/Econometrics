tmpCov<-tmpCov+tmp[[i]][j,]%*%t(tmp[[i]][j,])
} #end of j
dXCov[i,,]<-tmpCov*(1/(kn*delta))
ev<-eigen(dXCov[i,,])
dXCovEigenValue[i,1,]<-ev$values #
dXCovEigenVector[i,,]<-ev$vectors #
}#end of i
##Eigen Value Estimation without Correctness
#dXCov[1,,]
#1/t*kn*delta*colSums(dXCovEigenValue[,1,])
#1/t*colSums(dBetaFCovEigenValue[,1,])
###TRUE EIGEN VALUE
dBetaCovEigenValue<-array(dim=c(N,1,d))   ## Eigen Value of Covariance Matrix Beta*F
dBetaCovEigenVector<-array(dim=c(N,d,d))  ## Eigen Vector of Covariance Matrix Beta*F
for(i in 1:N){
tmpBFCov<-BetaArray[i,,]%*%truedFdF[i,,]%*%t(BetaArray[i,,])+Gamma2[i]*diag(d)
ev<-eigen(tmpBFCov)
dBetaCovEigenValue[i,1,]<-ev$values #
dBetaCovEigenVector[i,,]<-ev$vectors #
}
1/t*delta*colSums(dBetaCovEigenValue[,1,])
##############################################################################################
## Integrated Realized Eigenvalue Estimator with Bias Correction without repeated eigenvalue
##############################################################################################
BiasCorrectEigenValue<-array(dim=c(t/delta/kn,1,d))   ## claim the matrix to store the Eigen Value of Covariance Matrix
#BiasCorrectEigenVector<-array(dim=c(t/delta/kn,d,d))  ## claim matrix to store the the Eigen Vector of Covariance Matrix
for(i in 1:(t/delta/kn)){
for(g in 1:(length(dXCovEigenValue[i,1,]))){
BiasCorrectEigenValue[i,1,g]<-dXCovEigenValue[i,1,g]-1/kn*tr(ginv(diag(dXCovEigenValue[i,1,g]*rep(1, 5))-dXCov[i,,])%*%dXCov[i,,])*dXCovEigenValue[i,1,g]
}
}#end of i
1/t*kn*delta*colSums(BiasCorrectEigenValue[,1,])
##########################################################################################
## Integrated Realized Eigenvalue Estimator with Bias Correction with repeated eigenvalue
###########################################################################################
TrueEigen[MM,]<-1/t*delta*colSums(dBetaCovEigenValue[,1,])
estimatedEigen[MM,]<-1/t*kn*delta*colSums(dXCovEigenValue[,1,])
BiasCorrectEigen[MM,]<-1/t*kn*delta*colSums(BiasCorrectEigenValue[,1,])
print(MM)
}#end of MM simulation
colMeans(TrueEigen)
colMeans(estimatedEigen)
colMeans(BiasCorrectEigen)
#####################################################################
#PCA simulation R code
#by Hang Miao
#####################################################################
.Random.seed <- SeedTmp
library("MASS")
library("psych")
#####################################################################
#Settings
#####################################################################
T <- 1/252
n <-390*12    #78, 390, 390*12
delta <- T/n
t = 5*T  #5*T 23*T
d<- 5 #10,15,20,30,50,100
N<-t/delta+1
#moments of Normal
m1 <- sqrt(2/pi)
m2 <- 1
m4 <- 3
#####################################################################
#Parameters
#####################################################################
#converge rate of Sigma^2
kappa1<-3
kappa2<-4
kappa3<-5
Kappa<-c(kappa1,kappa2,kappa3)
#mean of sigma
theta1<-0.05
theta2<-0.04
theta3<-0.03
Theta<-c(theta1,theta2,theta3)
#diffusion coefficient of Sigma^2
eta1<-0.3
eta2<-0.4
eta3<-0.3
Eta<-c(eta1,eta2,eta3)
#Correlation betwwen W and tilde W
rho1<- -0.6
rho2<- -0.4
rho3<- -0.25
Rho<-c(rho1,rho2,rho3)
#drift of F
mu1<- 0.05
mu2<- 0.03
mu3<- 0.02
Mu<-c(mu1,mu2,mu3)
#converge rate of beta
kappatilde1<-1
kappatilde2<-2
kappatilde3<-3
Kappatilde<-c(kappatilde1,kappatilde2,kappatilde3)
#diffusion coefficient of Gamma
xitilde1<-  0.5
xitilde2<-  0.6
xitilde3<-  0.7
Xitilde<-c(xitilde1,xitilde2,xitilde3)
#jump intensity of F
lambdaF<- 1/t
#jump size coefficient of F
muF<- 4*sqrt(delta)
#jump intensity of Z
lambdaZ<-2/t
#jump size coefficient of Z
muZ<- 6*sqrt(delta)
#jump size coefficient of volatility jump
muSigma<- sqrt(delta)
#Correlation betwwen W and W
rhoF12<-0.05
rhoF13<-0.1
rhoF23<-0.15
#converge rate of Gamma^2
kappa<-4
#mean of Gamma^2
theta<-0.3
#diffusion coefficient of Gamma^2
eta<-0.06
NumM<-1000 #  number of monte carlo trials
r=3     #  factor j
#mean of beta
thetatilde1<-matrix(runif(d, min = 0.25, max = 1.75)) # num of ticks on time by num of stock
thetatilde2<-matrix(rnorm(d, 0,0.5)) # num of ticks on time by num of stock
thetatilde3<-matrix(rnorm(d, 0,0.5)) # num of ticks on time by num of stock
#thetatilde1<-matrix(runif(d, min = 1.1, max = 1.2)) # num of ticks on time by num of stock
#thetatilde2<-matrix(runif(d, min = 1.0, max = 1.1)) # num of ticks on time by num of stock
#thetatilde3<-matrix(runif(d, min = 0.9, max = 1.0)) # num of ticks on time by num of stock
Thetatilde<- array(c(thetatilde1,thetatilde2,thetatilde3),c(d,3)) # num of ticks on time by num of stock by num of factor
TrueEigen<-matrix(nrow=NumM,ncol=d)
estimatedEigen<-matrix(nrow=NumM,ncol=d)
BiasCorrectEigen<-matrix(nrow=NumM,ncol=d)
for(MM in 1:NumM){
#claim Beta
BetaArray<- array(rep(0,N*d*r),c(N, d, r))  # num of ticks on time by num of stock by num of factor
#Brownian Motion of F
W <-matrix(rnorm(r*N), ncol=r)   # N by 3
W[,2]<-rhoF12*W[,1]+sqrt(1-rhoF12^2)*W[,2]    #j=2
W[,3]<-rhoF13*W[,1]+rhoF23*W[,2]+sqrt(1-rhoF13^2-rhoF23^2)*W[,3] #j=3
#roughly 0.05 for mean(W[,1]*W[,2])/sqrt(var(W[,1])*var(W[,2]))
#roughly 0.10 for mean(W[,1]*W[,3])/sqrt(var(W[,1])*var(W[,3]))
#roughly 0.15 for mean(W[,2]*W[,3])/sqrt(var(W[,2])*var(W[,3]))
#Brownian Motion of Sigma^2
Wtilde<-matrix(rnorm(r*N), ncol=r)
Wtilde[,1]<-rho1*W[,1]+sqrt(1-rho1^2)*Wtilde[,1]
Wtilde[,2]<-rho2*W[,2]+sqrt(1-rho2^2)*Wtilde[,2]
Wtilde[,3]<-rho3*W[,3]+sqrt(1-rho3^2)*Wtilde[,3]
#Brownian Motion of Z
B<-matrix(rnorm(N*d),ncol=d)  # N by d
#Brownian Motion of Gamma^2
Bbar<-matrix(rnorm(N))
#Brownian Motion of Beta
Btilde<-array(rnorm(N*d*r),c(N, d, r))  # num of ticks on time by num of stock by num of factor
JumpF<-matrix(nrow=N, ncol=r) # Jump for F
CoJumpVol<-matrix(nrow=N, ncol=r) # Vol Co JUmp for sigma^2
Sigma2<-matrix(nrow=N, ncol=r)  # Sigma^2
Gamma2<-matrix(nrow=N)  # Gamma^2
JumpZ<-matrix(nrow=N,ncol=d) # Jump for Z
Z<-matrix(nrow=N,ncol=d) # Z
FactorMatrix<-matrix(nrow=N, ncol=r) # F
for(j in 1:r)
{
################################################################
#number of jump F
################################################################
S1 <- c()
t1 <- c()
q <- 1
S1[1] <- 0
t1[1] <- 0
while(S1[q]<=t )
{
q <- q+1
t1[q] <- rexp(1, rate = lambdaF)
while(t1[q]>t)
{t1[q] <- rexp(1, rate = lambdaF)}
S1[q] <- S1[q-1]+t1[q]
}
S1 <- S1[2:(q-1)]
U <- S1/delta     # %/% integer division
U <- ceiling(U)  # U contains the time which is the closest right end point of the time interval delta which the jump occurs
################################################################
#Jump size
################################################################
xi <- numeric(q-2)
for(i in 1:(q-2) )
{
if(rbinom(1, 1, 0.5)==0)
{xi[i] <- -rexp(1, rate = 1/muF)}
else
{xi[i] <- rexp(1, rate = 1/muF)}
}
################################################################
#Jump part
################################################################
J1 <- numeric(N)
for(i in 1:(q-2))
{
J1[U[i]] <- xi[i]
}
################################################################
#coJump part
################################################################
#size
xi <- numeric(q-2)
for(i in 1:(q-2) )
{
if(rbinom(1, 1, 0.5)==0)
{xi[i] <- -rexp(1, rate = 1/muSigma)}
else
{xi[i] <- rexp(1, rate = 1/muSigma)}
}
#cojump denote as Jc
Jc <- numeric(N)
for(i in 1:(q-2))
{
Jc[U[i]] <- xi[i]
}
JumpF[,j]<-J1
CoJumpVol[,j]<-Jc
}#end of "for j". j is the facotr number
################################################################
#sigma^2
################################################################
Sigma2[1,]<-Theta
for(j in 1:r )
{
for(i in 2:N )
{
Sigma2[i,j]<-Sigma2[i-1,j]+Kappa[j]*(Theta[j]-Sigma2[i-1,j])*delta+Eta[j]*sqrt(Sigma2[i-1,j])*Wtilde[i,j]*sqrt(delta)+CoJumpVol[i,j]
}#end of "for i" is the number of ticks on time horizon
}#end of "for j". j is the facotr number
################################################################
#gamma^2
################################################################
Gamma2[1]=theta
for(i in 2:N )
{
Gamma2[i]<-Gamma2[i-1]+kappa*(theta-Gamma2[i-1])*delta+eta*sqrt(Gamma2[i-1])*Bbar[i]*sqrt(delta)
}#end of "for i" is the number of ticks on time horizon
################################################################
#  Jump of Z
################################################################
for(j in 1:d)
{
################################################################
#number of jump Z
################################################################
S2 <- c()
t2 <- c()
q <- 1
S2[1] <- 0
t2[1] <- 0
while(S2[q]<=t )
{
q <- q+1
t2[q] <- rexp(1, rate = lambdaZ)
while(t2[q]>t)
{t2[q] <- rexp(1, rate = lambdaZ)}
S2[q] <- S2[q-1]+t2[q]
}
S2 <- S2[2:(q-1)]
U <- S2/delta     # %/% integer division
U <- ceiling(U)  # U contains the time which is the closest right end point of the time interval delta which the jump occurs
################################################################
#Jump size
################################################################
xi <- numeric(q-2)
for(i in 1:(q-2) )
{
if(rbinom(1, 1, 0.5)==0)
{xi[i] <- -rexp(1, rate = 1/muZ)}
else
{xi[i] <- rexp(1, rate = 1/muZ)}
}
################################################################
#Z Jump part
################################################################
J2 <- numeric(N)
for(i in 1:(q-2))
{
J2[U[i]] <- xi[i]
}
JumpZ[,j]<- J2
}
################################################################
#Z
################################################################
Z<-t(t(B)%*% diag(as.vector(sqrt(Gamma2))) *sqrt(delta))+JumpZ
################################################################
#F matrix
################################################################
FactorMatrix<- matrix(delta,nrow=N,ncol=r)%*%diag(Mu)+W*sqrt(Sigma2)*sqrt(delta)+JumpF
################################################################
#Beta
################################################################
for(i in 1:d ){
for(j in 1:r)
{
BetaArray[1,,]<-Thetatilde
for(tt in 2:N)
{
if(j==1){
BetaArray[tt,i,j]<- BetaArray[tt-1,i,j]+Kappatilde[j]*(Thetatilde[i,j]-BetaArray[tt-1,i,j])*delta+Xitilde[j]*sqrt(BetaArray[tt-1,i,j])*Btilde[tt,i,j]*sqrt(delta)
}
else{
BetaArray[tt,i,j]<- BetaArray[tt-1,i,j]+Kappatilde[j]*(Thetatilde[i,j]-BetaArray[tt-1,i,j])*delta+Xitilde[j]*Btilde[tt,i,j]*sqrt(delta)
}
}#end of "for k" is the number of ticks on time horizon
}#end of "for j". j is the facotr number
}#end of "for d". d is the stock number
################################################################
# X
################################################################
dX<-matrix(nrow=N,ncol=d)
for(i in 1:N )
{
dX[i,]<-BetaArray[i,,]%*%FactorMatrix[i,]+Z[i,]
}#end of "for i" is the number of ticks on time horizon
xmat1<-data.matrix(cumsum(data.frame(dX)))
colnames(xmat1) <- NULL
Xmatrix<-xmat1  ##store the value of X
'summary(JumpF)
summary(JumpZ)
summary(CoJumpVol)
summary(BetaArray)
summary(Sigma2)
summary(Gamma2)
summary(FactorMatrix)
summary(Z)
summary(Xmatrix)'
#####################################################################
##finding the price jump occurence position using truncation method
#####################################################################
Indicator<-matrix(nrow=N, ncol=d)
for(jj in 1:d){
#Bipower variation
X1=Xmatrix[,jj]
B11nT <- 0 #BPV
for(i in 1:(N-2))
{B11nT <- B11nT + (1/(m1)^2)*abs(X1[i+1]-X1[i])*abs(X1[i+2]-X1[i+1])}
##Threshold alpha
indicator1 <- numeric(N)
IVhat <- B11nT
alpha <- 3*sqrt(((1/t)*IVhat))*delta^0.47
for(i in 1:(N-1))
{
if(abs(X1[i+1]-X1[i]) <= alpha)
indicator1[i] <- 1
}
IVnew <- 0
for(i in 1:(N-1))
{IVnew <- IVnew + ((X1[i+1]-X1[i])*indicator1[i])^2} #estimate new IV
while(abs(IVnew - IVhat) > 0.05*IVhat)
{
IVhat = IVnew
indicator1 <- numeric(N)
for(i in 1:(N-1))
{
if(abs(X1[i+1]-X1[i]) <= alpha)
indicator1[i] <- 1
}
IVnew <- 0
for(i in 1:(N-1))
{IVnew <- IVnew + ((X1[i+1]-X1[i])*indicator1[i])^2} #estimate new IV
alpha <- 3*sqrt(((1/t)*IVnew))*delta^0.47 #new alpha
}
#position of price jump occured
indicator1 <- numeric(N)
for(i in 1:(N-1))
{
if(abs(X1[i+1]-X1[i]) >= alpha)
indicator1[i] <- 1
}
Indicator[,jj]<-1-indicator1
}
dXIndicator<-Indicator[1:N-1,]
#sum(1-Indicator[,3])
#####################################################################
##finding the kn
#####################################################################
#kn<-120
kn<-t/delta/(0.5*sqrt(1/delta)*sqrt(log(d)))
#library(gmp)
#factorize(23400)
# divisor function for positive integer
divisors <- function(x){
#  Vector of numberes to test against
y <- seq_len(x)
#  Modulo division. If remainder is 0 that number is a divisor of x so return it
y[ x%%y == 0 ]
}
#which.min(a-b) check for nearest value in a vector to b
kn<-divisors(t/delta)[which.min(abs(divisors(t/delta) - 0.5*sqrt(1/delta)*sqrt(log(5))))]
#####################################################################
## dF*dF matrix
#####################################################################
truedFdF<- array(dim=c(N,3,3))
RhoW<-matrix(c(1,rhoF12,rhoF13,rhoF12,1,rhoF23,rhoF13,rhoF23,1),nrow = 3)
for(tt in 1:N){
truedFdF[tt,,]<-diag(sqrt(Sigma2[tt,]))%*%RhoW%*%diag(sqrt(Sigma2[tt,]))
}
#####################################################################
## Spot Covariance Matrix
#####################################################################
#d <- rpois(73,5)
#seq_along(d)
#ceiling(seq_along(d)/20)
#split(d, ceiling(seq_along(d)/20))
#aaa<-seq_len(10)
#diag(aaa)*2
#xmat <- matrix(1:100, nrow=20, ncol=5, byrow=TRUE)
#xsplit <- rep( 1:5, times= rep(4,5))
#tmp <- split.data.frame(xmat,xsplit)
#aaa<-matrix(c(1,1),nrow=1,ncol=2)
#bbb<-matrix(c(2,3),nrow=2,ncol=1)
#xsplit <- rep( 1:kn, times= rep(t/delta/kn,kn))
##Eigen Value for the
xsplit <- rep( 1:(t/delta/kn), times= rep(kn,t/delta/kn))  ## to splite data into t/kn/delta
dXmatrix<-diff(Xmatrix) #Delta X
tmp <- split.data.frame(dXmatrix*dXIndicator,xsplit)
#tmpBetaF <- split.data.frame(dBetaFmatrix*dXIndicator,xsplit)
dXCov<-array(dim=c(t/delta/kn,d,d))     ## claim the matrix to store the spot Covariance Matrix of X
dXCovEigenValue<-array(dim=c(t/delta/kn,1,d))   ## claim the matrix to store the Eigen Value of Covariance Matrix
dXCovEigenVector<-array(dim=c(t/delta/kn,d,d))  ## claim matrix to store the the Eigen Vector of Covariance Matrix
#dBetaFCov<-array(dim=c(t/delta/kn,d,d))     ## Covariance Matrix of Beta*F
#dBetaFCovEigenValue<-array(dim=c(t/delta/kn,1,d))   ## Eigen Value of Covariance Matrix Beta*F
#dBetaFCovEigenVector<-array(dim=c(t/delta/kn,d,d))  ## Eigen Vector of Covariance Matrix Beta*F
#####################################################################
## Integrated Realized Eigenvalue Estimator without Bias Correction
#####################################################################
options(scipen = 999)
for(i in 1:(t/delta/kn)){
tmpCov<-matrix(numeric(d*d), c(d,d))
for(j in 1:kn){
tmpCov<-tmpCov+tmp[[i]][j,]%*%t(tmp[[i]][j,])
} #end of j
dXCov[i,,]<-tmpCov*(1/(kn*delta))
ev<-eigen(dXCov[i,,])
dXCovEigenValue[i,1,]<-ev$values #
dXCovEigenVector[i,,]<-ev$vectors #
}#end of i
##Eigen Value Estimation without Correctness
#dXCov[1,,]
#1/t*kn*delta*colSums(dXCovEigenValue[,1,])
#1/t*colSums(dBetaFCovEigenValue[,1,])
###TRUE EIGEN VALUE
dBetaCovEigenValue<-array(dim=c(N,1,d))   ## Eigen Value of Covariance Matrix Beta*F
dBetaCovEigenVector<-array(dim=c(N,d,d))  ## Eigen Vector of Covariance Matrix Beta*F
for(i in 1:N){
tmpBFCov<-BetaArray[i,,]%*%truedFdF[i,,]%*%t(BetaArray[i,,])+Gamma2[i]*diag(d)
ev<-eigen(tmpBFCov)
dBetaCovEigenValue[i,1,]<-ev$values #
dBetaCovEigenVector[i,,]<-ev$vectors #
}
1/t*delta*colSums(dBetaCovEigenValue[,1,])
##############################################################################################
## Integrated Realized Eigenvalue Estimator with Bias Correction without repeated eigenvalue
##############################################################################################
BiasCorrectEigenValue<-array(dim=c(t/delta/kn,1,d))   ## claim the matrix to store the Eigen Value of Covariance Matrix
#BiasCorrectEigenVector<-array(dim=c(t/delta/kn,d,d))  ## claim matrix to store the the Eigen Vector of Covariance Matrix
for(i in 1:(t/delta/kn)){
for(g in 1:(length(dXCovEigenValue[i,1,]))){
BiasCorrectEigenValue[i,1,g]<-dXCovEigenValue[i,1,g]-1/kn*tr(ginv(diag(dXCovEigenValue[i,1,g]*rep(1, 5))-dXCov[i,,])%*%dXCov[i,,])*dXCovEigenValue[i,1,g]
}
}#end of i
1/t*kn*delta*colSums(BiasCorrectEigenValue[,1,])
##########################################################################################
## Integrated Realized Eigenvalue Estimator with Bias Correction with repeated eigenvalue
###########################################################################################
TrueEigen[MM,]<-1/t*delta*colSums(dBetaCovEigenValue[,1,])
estimatedEigen[MM,]<-1/t*kn*delta*colSums(dXCovEigenValue[,1,])
BiasCorrectEigen[MM,]<-1/t*kn*delta*colSums(BiasCorrectEigenValue[,1,])
print(MM)
}#end of MM simulation
colMeans(TrueEigen)
x = 1.89318165		+1.27150027	 +0.17618789 +0.59907400
specify_decimal(x, 8)
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
x = 1.89318165		+1.27150027	 +0.17618789 +0.59907400
specify_decimal(x, 8)
x =
8.41401073	-
2.55989383
specify_decimal(x, 8)
x =
1	-
0.12803404
specify_decimal(x, 8)
x = 1.41275056						+ 2.47026033
specify_decimal(x, 8)
x = 0.41427819						+ 0.06600000
specify_decimal(x, 8)
x = 0.54871000		+0.54870999	 +0.36580666
specify_decimal(x, 8)
x =
1	-
1.46322665
specify_decimal(x, 8)
x =
5	-
1.46322665
specify_decimal(x, 8)
load("~/.RData")
setwd("C:/Users/Hahn/Dropbox/Econometrics  R Emprical Analysis/assignment/Final")
df <- read.csv("Dataset11_23.csv")
head(df)
setwd("C:/Users/Hahn/Dropbox/Econometrics  R Emprical Analysis/assignment/Final")
df <- read.csv("Dataset11_23.csv")
head(df)
