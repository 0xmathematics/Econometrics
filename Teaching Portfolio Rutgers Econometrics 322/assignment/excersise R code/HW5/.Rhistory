N = 10000000
mu = 5
sigma = 4
# randomly generate N samples from the underlying population
X = rnorm(N, mean = mu, sd = sigma)
X
E = mu # Theoretical Expectation for Normal(mu, sigma^2)
Var = sigma^2 # Theoretical Expectation for Normal(mu, sigma^2)
sd = sigma # Theoretical standard deviation
hist(X,
col = "steelblue" ,
freq = FALSE,
breaks = 50,
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
x = seq(range(X)[1], range(X)[2], by = diff(range(X))/50 )
curve(dnorm(x, mean = mu, sd = sigma),
col = "red",
lwd = "2",
add = TRUE)
legend("topleft",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
for (i in 1:length(Sample_Size)) {
Sample_X = sample(X, size = Sample_Size[i] , replace = FALSE, prob = NULL)
Mean_X = mean(Sample_X)
Sample_Mean[i]=Mean_X
}
# plot the sample mean for each sample size candidiate
plot(Sample_Size, Sample_Mean, log = "x", ylim =c(mu-sigma,mu+sigma),
xlab ='Sample Size', ylab = 'Sample Mean', col = 'steelblue',
main = 'Sample Mean Converge to Population Mean',cex.main=0.75)
# Plot the Theoretical Expectation or Population Mean
abline(a = NULL, b = NULL, h = mu, col = 'red')
legend("topright",c("Sample Mean","Population Mean"),fill=c("steelblue","red"),cex = 0.5 )
# The underlying population follows Normal(mu, sigma^2)
N = 10000000
mu = 5
sigma = 4
# randomly generate N samples from the underlying population
X = rnorm(N, mean = mu, sd = sigma)
E = mu # Theoretical Expectation for Normal(mu, sigma^2)
Var = sigma^2 # Theoretical Expectation for Normal(mu, sigma^2)
sd = sigma # Theoretical standard deviation
# Plot the histogram of N samples
# randomly draw from the underlying population distribution Normal(mu, sigma^2)
hist(X,
col = "steelblue" ,
freq = FALSE,
breaks = 50,
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
# draw the the underlying population distribution Normal(mu, sigma^2)
x = seq(range(X)[1], range(X)[2], by = diff(range(X))/50 )
curve(dnorm(x, mean = mu, sd = sigma),
col = "red",
lwd = "2",
add = TRUE)
legend("topleft",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
# suppose we only use a small propotion of the total sample to estimate the population mean of the
# underlying population mu. The estimator is the sample mean: 1\n sum x_i
# We claim that as the size of sample increase, the sample mean converge to the population mean
# the following is the sample size vector contains 24 candidiate sample size
Sample_Size = 2^(0:23)
# initialize a vector with 24 entries to store the sample mean value with each sample size candidiate
Sample_Mean = numeric(length = length(Sample_Size))
# calculate the sample mean for each sample size candidiate
for (i in 1:length(Sample_Size)) {
Sample_X = sample(X, size = Sample_Size[i] , replace = FALSE, prob = NULL)
Mean_X = mean(Sample_X)
Sample_Mean[i]=Mean_X
}
# plot the sample mean for each sample size candidiate
plot(Sample_Size, Sample_Mean, log = "x", ylim =c(mu-sigma,mu+sigma),
xlab ='Sample Size', ylab = 'Sample Mean', col = 'steelblue',
main = 'Sample Mean Converge to Population Mean',cex.main=0.75)
# Plot the Theoretical Expectation or Population Mean
abline(a = NULL, b = NULL, h = mu, col = 'red')
legend("topright",c("Sample Mean","Population Mean"),fill=c("steelblue","red"),cex = 0.5 )
# The underlying population follows Binomial(n,p)
N = 10000000
n_Trials = 40
p = 0.2
# randomly generate N samples from the underlying population
X = rbinom(n=N, size = n_Trials, prob=p)
E = n_Trials*p # Theoretical Expectation for Binomial Distribution
Var = n_Trials*p*(1-p) # Theoretical Expectation for Binomial Distribution
sd = as.integer(sqrt(Var)) #  Theoretical standard deviation round to the nearest integer
# Plot the histogram of N samples
# randomly draw  from the underlying population distribution Normal(mu, sigma^2)
hist(X,
col = "steelblue" ,
prob = FALSE,
breaks = seq(0,n_Trials,1),
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
# draw the the underlying population distribution Binomial(n,p)
x = seq(0,n_Trials,1)
lines(x,dbinom(x,n_Trials,p)* N ,col="red")
legend("topright",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
# suppose we only use a small propotion of the total sample to estimate the population mean of the
# underlying population which is n_Trials*p=40*0.2=8. The estimator is the sample mean: 1\n sum x_i
# We claim that as the size of sample increase, the sample mean converge to the population mean
# the following is the sample size vector contains 24 candidiate sample size
Sample_Size = 2^(0:23)
# initialize a vector with 24 entries to store the sample mean value with each sample size candidiate
Sample_Mean = numeric(length = length(Sample_Size))
# calculate the sample mean for each sample size candidiate
for (i in 1:length(Sample_Size)) {
Sample_X = sample(X, size = Sample_Size[i] , replace = FALSE, prob = NULL)
Mean_X = mean(Sample_X)
Sample_Mean[i]=Mean_X
}
# plot the sample mean for each sample size candidiate
plot(Sample_Size, Sample_Mean, log = "x", ylim =c(E-sd,E+sd),
xlab ='Sample Size', ylab = 'Sample Mean', col = 'steelblue',
main = 'Sample Mean Converge to Population Mean',cex.main=0.75)
# Plot the Theoretical Expectation or Population Mean
abline(a = NULL, b = NULL, h = E, col = 'red')
legend("topright",c("Sample Mean","Population Mean"),fill=c("steelblue","red"),cex = 0.5 )
################################
# Chi Square Distribution
################################
# The underlying population follows Chi(df)
N = 10000000
df = 5
# randomly generate N samples from the underlying population
X = rchisq(N, df, ncp = 0)
E = df# Theoretical Expectation for  Chi Square Distribution
Var =2*df # Theoretical Expectation for Binomial Distribution
sd = as.integer(sqrt(Var)) # Theoretical standard deviation
# draw the histogram of N samples randomly draw
# from the underlying population distribution Chi(df)
hist(X,
col = "steelblue" ,
freq = FALSE,
breaks = 50,
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
# draw the the underlying population distribution Chi(df)
x = seq(range(X)[1], range(X)[2], by = diff(range(X))/50 )
curve(dchisq(x,df),
col = "red",
lwd = "2",
add = TRUE)
legend("topright",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
# the following is the sample size vector contains 24 candidiate sample size
Sample_Size = 2^(0:23)
# initialize a vector with 24 entries to store the sample mean value with each sample size candidiate
Sample_Mean = numeric(length = length(Sample_Size))
# calculate the sample mean for each sample size candidiate
for (i in 1:length(Sample_Size)) {
Sample_X = sample(X, size = Sample_Size[i] , replace = FALSE, prob = NULL)
Mean_X = mean(Sample_X)
Sample_Mean[i]=Mean_X
}
# plot the sample mean for each sample size candidiate
plot(Sample_Size, Sample_Mean, log = "x", ylim =c(E-sd,E+sd),
xlab ='Sample Size', ylab = 'Sample Mean', col = 'steelblue',
main = 'Sample Mean Converge to Population Mean',cex.main=0.75)
# Plot the Theoretical Expectation or Population Mean
abline(a = NULL, b = NULL, h = E, col = 'red')
legend("topright",c("Sample Mean","Population Mean"),fill=c("steelblue","red"),cex = 0.5 )
N = 10000000
mu = 20
sigma = 5
# randomly generate N samples from the underlying population
X = rnorm(N, mean = mu, sd = sigma)
E = mu
Var = sigma^2
sd = sigma
# Plot the histogram of N samples randomly draw
# from the underlying population distribution Normal(mu, sigma^2)
hist(X,
col = "steelblue" ,
freq = FALSE,
breaks = 50,
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
# draw the the underlying population distribution Normal(mu, sigma^2)
x = seq(range(X)[1], range(X)[2], by = diff(range(X))/50 )
curve(dnorm(x, mean = mu, sd = sigma),
col = "red",
lwd = "2",
add = TRUE)
legend("topleft",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
### small Sample and Large Sample
Sample_Size = c(10, 100000 )
### number of repetition
reps = 2000
###
#i=1 #small sample
#i=2 #large sample
i=2
## Conduct reps (2000) times of following experiment:
## each time draw sample_Size  many of samples from underlying population
## samples is a matrix with dimension Sample_Size*reps
samples <- replicate(reps, sample(X,size = Sample_Size[i],replace = FALSE, prob = NULL) )
## calculate the sample mean for each iteration
sample_Means <- colMeans(samples)
hist(sample_Means,
col = "steelblue" ,
freq = FALSE,
breaks = 200,
main = 'Sample Mean Histogram and Normal Distribution',cex.main=0.75)
# draw the convergent Normal(E, Var)
x = seq(range(sample_Means)[1], range(sample_Means)[2], by = diff(range(sample_Means))/50 )
curve(dnorm(x, mean = E, sd = sd/sqrt(Sample_Size[i])),
col = "red",
lwd = "2",
add = TRUE)
legend("topleft",c("Sample Mean Histogram","Normal Distribution"),fill=c("steelblue","red"),cex = 0.5 )
library('readxl')
setwd("~/Dropbox/Econometrics/R Emprical Analysis/HW5")
dtibble <- read_excel("data-2_27_2019-7_08 PM.xlsx", skip = 1, col_types = "numeric")
df = data.frame(dtibble)
head(df)
###################
df
M1 = matrix(1:10, nrow = 5, ncol = 2, byrow = TRUE)
M1
rep(1,times = 10)
M2 = matrix(rep(1,times = 10), nrow = 5, ncol = 2, byrow = TRUE)
M2
V1 = c(1:5)
V1
V2 = rep(1, times = 5)
V2
V1 + V2
V1 * V2
M1 + M2
M1 %*% t(M2)
t(M1) %*% M2
diag(c(1,2,3,4,5))
M5 = diag(c(1,2,3,4,5))
M5
### creat an identity matrix diagnol matrix with 5 by 5 dimension
M6 = diag(5)
M6
M5inv = solve(M5)
M5inv
M6inv = solve(M6)
M6inv
