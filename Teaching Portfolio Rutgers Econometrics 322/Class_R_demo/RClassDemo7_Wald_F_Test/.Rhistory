setwd("~/Dropbox/Econometrics  R Emprical Analysis/assignment/Assignment7")
df <- read.csv("A7.csv")
head(df)
y = df[, 1]
X = df[ , c(2,3,4,5)]
n = nrow(df)
intercept = rep(1,nrow(df))
X = cbind(intercept,X)
X = as.matrix(X)
y = as.matrix(y)
#Q3
betaOLS = solve( t(X) %*% X ) %*% t(X) %*% y
round(betaOLS, digits = 3)
#Q4
uhat = y- X %*%betaOLS
SSR = t(y- X %*%betaOLS )%*% (y- X %*%betaOLS )
sigmasqaureHat = SSR/ (n-4-1)
sigmasqaureHat = as.numeric(sigmasqaureHat)
round(sigmasqaureHat, digits = 3)
#Q5
VarCovMatrixBetaOLS = sigmasqaureHat * solve(t(X) %*% X)
VarBetaOLS = diag(VarCovMatrixBetaOLS)
sdBetaOLS = sqrt(VarBetaOLS)
round(sdBetaOLS,digits = 3)
# Check the Code Using Third Party Package
linearMod2 <- lm(y ~ x1+x2+x3+x4, data=df)
summary(linearMod2)
summary(linearMod2)$coef
round(betaOLS, digits = 3)
round(sdBetaOLS,digits = 3)
b = 2 #null hypothesis
i = 3 # the beta_2
t = (betaOLS[i]-b)/sdBetaOLS[i]
round(t, digits = 3)
setwd("~/Dropbox/Econometrics  R Emprical Analysis/assignment/Assignment6")
df <- read.csv("A6.csv")
head(df)
y = df[, 1]
X = df[ , c(2,3,4,5)]
n = nrow(df)
intercept = rep(1,nrow(df))
X = cbind(intercept,X)
X = as.matrix(X)
y = as.matrix(y)
betaOLS = solve( t(X) %*% X ) %*% t(X) %*% y
round(betaOLS, digits = 3)
#Q4
uhat = y- X %*%betaOLS
uhat
SSR = t(y- X %*%betaOLS )%*% (y- X %*%betaOLS )
SSR
sum(uhat^2)
sigmasqaureHat = SSR/ (n-4-1)
sigmasqaureHat
df <- read.csv("A6.csv")
head(df)
df
nrow(df)
nrow(df)
#Q5
VarCovMatrixBetaOLS = sigmasqaureHat * solve(t(X) %*% X)
uhat = y- X %*%betaOLS
SSR = t(y- X %*%betaOLS )%*% (y- X %*%betaOLS )
SSR
sum(uhat^2)
sigmasqaureHat = SSR/ (n-4-1)
sigmasqaureHat = as.numeric(sigmasqaureHat)
round(sigmasqaureHat, digits = 3)
VarCovMatrixBetaOLS = sigmasqaureHat * solve(t(X) %*% X)
VarCovMatrixBetaOLS
VarCovMatrixBetaOLS
diag(VarCovMatrixBetaOLS)
VarCovMatrixBetaOLS = sigmasqaureHat * solve(t(X) %*% X)
VarBetaOLS = diag(VarCovMatrixBetaOLS)
sdBetaOLS = sqrt(VarBetaOLS)
round(sdBetaOLS, digits = 3)
df <- read.csv("A7.csv")
head(df)
y = df[, 1]
X = df[ , c(2,3,4,5)]
n = nrow(df)
intercept = rep(1,nrow(df))
X = cbind(intercept,X)
nrow(df)
df <- read.csv("A7.csv")
head(df)
y = df[, 1]
X = df[ , c(2,3,4,5)]
n = nrow(df)
intercept = rep(1,nrow(df))
X = cbind(intercept,X)
nrow(df)
setwd("~/Dropbox/Econometrics  R Emprical Analysis/assignment/Assignment7")
df <- read.csv("A7.csv")
head(df)
nrow(df)
nrow(df)
y = df[, 1]
X = df[ , c(2,3,4,5)]
n = nrow(df)
intercept = rep(1,nrow(df))
X = cbind(intercept,X)
#parameters 5
# size 30
# 1/6 17%
X = as.matrix(X)
y = as.matrix(y)
#Q3
betaOLS = solve( t(X) %*% X ) %*% t(X) %*% y
round(betaOLS, digits = 3)
#Q4
uhat = y- X %*%betaOLS
SSR = t(y- X %*%betaOLS )%*% (y- X %*%betaOLS )
sigmasqaureHat = SSR/ (n-4-1)
sigmasqaureHat = as.numeric(sigmasqaureHat)
round(sigmasqaureHat, digits = 3)
#Q5
VarCovMatrixBetaOLS = sigmasqaureHat * solve(t(X) %*% X)
VarBetaOLS = diag(VarCovMatrixBetaOLS)
sdBetaOLS = sqrt(VarBetaOLS)
round(sdBetaOLS,digits = 3)
b = 2 #null hypothesis
i = 3 # the beta_2
t = (betaOLS[i]-b)/sdBetaOLS[i]
round(t, digits = 3)
sdBetaOLS
b = 2 #null hypothesis
i = 3 # the beta_2
t = (betaOLS[i]-b)/sdBetaOLS[i]
round(t, digits = 3)
lm(y ~ x1+x2+x3+x4, data=df)
linearMod2 <- lm(y ~ x1+x2+x3+x4, data=df)
summary(linearMod2)
linearMod2 <- lm(y ~ x1+x2+x3+x4, data=df)
summary(linearMod2)
ncol(X)
deg = n - ncol(X)
Q11 = qt(.90,df=deg)
deg = n - ncol(X)
Q11 = qt(.90,df=deg)
round(Q11, digits = 3)
i = 3
cv = qt(0.95)
left = betaOLS[i]  - cv*sdBetaOLS[i]
right = betaOLS[i]  + cv*sdBetaOLS[i]
CI90 = c(left,right)
round(CI90, digits = 3)
i = 3
deg = n - ncol(X)
cv = qt(0.95,deg )
left = betaOLS[i]  - cv*sdBetaOLS[i]
right = betaOLS[i]  + cv*sdBetaOLS[i]
CI90 = c(left,right)
round(CI90, digits = 3)
uhat = y- X %*%betaOLS
SSR = t(y- X %*%betaOLS )%*% (y- X %*%betaOLS )
SSR
sum(uhat^2)
sigmasqaureHat = SSR/ (n-4-1)
sigmasqaureHat = as.numeric(sigmasqaureHat)
round(sigmasqaureHat, digits = 3)
SSR
setwd("~/Dropbox/Econometrics  R Emprical Analysis/assignment/Assignment6")
df <- read.csv("A6.csv")
head(df)
##############################
## Analysis
##############################
### matrix method
y = df[, 1]
X = df[ , c(2,3,4,5)]
n = nrow(df)
intercept = rep(1,nrow(df))
X = cbind(intercept,X)
X = as.matrix(X)
y = as.matrix(y)
#Q3
betaOLS = solve( t(X) %*% X ) %*% t(X) %*% y
round(betaOLS, digits = 3)
uhat = y- X %*%betaOLS
SSR = t(y- X %*%betaOLS )%*% (y- X %*%betaOLS )
SSR
sigmasqaureHat = SSR/ (n-4-1)
sigmasqaureHat = as.numeric(sigmasqaureHat)
sigmasqaureHat
round(sigmasqaureHat, digits = 3)
SSR/ (n-4-1)
SSR
N = 10000000
df1 = 5
df2 = 5 # df2 should be great 2 otherwise theoretical expectation does not exist
# if df2 less than 5, theoretical variance does not exist
# randomly generate N samples from the underlying population
X = rf(N, df1, df2)
E = df2/(df2-2)# Theoretical Expectation for  f  Distribution
Var =2*df2^2*(df1+df2-2)/(df1*(df2-2)^2*(df2-4)) # Theoretical Expectation for Binomial Distribution
sd = sqrt(Var) # Theoretical standard deviation
# draw the histogram of N samples randomly draw
# from the underlying population distribution f(df1, df2)
hist(X,
col = "steelblue" ,
freq = FALSE,
breaks = 5000,
xlim= c(0,20),
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
# draw the the underlying population distribution f(df1, df2)
x = seq(range(X)[1], range(X)[2], by = diff(range(X))/50 )
curve(df(x,df1,df2),
col = "red",
lwd = "2",
add = TRUE)
legend("topright",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
Sample_Size = c(2, 100000 )
### number of repetition
reps = 2000
###
#i=1 #small sample
#i=2 #large sample
i=1
## Conduct reps (2000) times of following experiment:
## each time draw sample_Size  many of samples from underlying population
## samples is a matrix with dimension Sample_Size*reps
samples <- replicate(reps, sample(X,size = Sample_Size[i],replace = FALSE, prob = NULL) )
## calculate the sample mean for each iteration
sample_Means <- colMeans(samples)
sample_Means
i=2
## Conduct reps (2000) times of following experiment:
## each time draw sample_Size  many of samples from underlying population
## samples is a matrix with dimension Sample_Size*reps
samples <- replicate(reps, sample(X,size = Sample_Size[i],replace = FALSE, prob = NULL) )
## calculate the sample mean for each iteration
sample_Means <- colMeans(samples)
sample_Means2 = sample_Means
sample_Means1[1:10,]
sample_Means2[1:10,]
setwd("~/Dropbox/Econometrics  R Emprical Analysis/class demo/Demo4 Wald Test and F Test")
dtibble <- read_excel("cps08.xlsx", col_types = "numeric")
df = data.frame(dtibble)
head(df)
library('readxl')
dtibble <- read_excel("cps08.xlsx", col_types = "numeric")
df = data.frame(dtibble)
head(df)
y = df$ahe
X = df[ , c(3,4,5)]
n = nrow(df)
intercept = rep(1,nrow(df))
X = cbind(intercept,X)
X = as.matrix(X)
y = as.matrix(y)
betaOLS = solve( t(X) %*% X ) %*% t(X) %*% y
SSR = t(y- X %*%betaOLS )%*% (y- X %*%betaOLS )
sigmasqaureHat = SSR/ (n-3-1)
sigmasqaureHat = as.numeric(sigmasqaureHat)
VarCovMatrixBetaOLS = sigmasqaureHat * solve(t(X) %*% X)
VarBetaOLS = diag(VarCovMatrixBetaOLS)
sdBetaOLS = sqrt(VarBetaOLS)
A = cbind(rep(0,3) ,diag(3))
A
a
a = as.vector(rep(0,3))
a
d = 3
a
Wald_Stat = t(A %*% betaOLS-a) %*% solve(sigmasqaureHat*A %*% solve(t(X) %*% X) %*% t(A) ) %*% (A %*% betaOLS-a)
F_Stat = Wald_Stat/d
Wald_Stat
sigmasqaureHat
critical_Value = qchisq(1-Sig_alpha, df)
Sig_alpha = 0.1
df = d
critical_Value = qchisq(1-Sig_alpha, df)
critical_Value
Wald_Stat
pvalue = 1 - pchisq(Wald_Stat, df)
pvalue
F_Stat = Wald_Stat/d
F_Stat
critical_Value = qf(1-Sig_alpha, df1,df2)
critical_Value
F_Stat
pvalue = pf(F_Stat, df1,df2, lower.tail = FALSE)
pvalue
pvalue = 1- pf(F_Stat, df1,df2)
pvalue
linearMod2 <- lm(ahe ~ female+bachelor+age, data=df)
summary(linearMod2)
summary(linearMod2)$coef
summary(linearMod2)
F_Stat
linearMod2 <- lm(ahe ~ female+bachelor+age, data=df)
df
## load excel file
dtibble <- read_excel("cps08.xlsx", col_types = "numeric")
df = data.frame(dtibble)
head(df)
linearMod2 <- lm(ahe ~ female+bachelor+age, data=df)
summary(linearMod2)
F_Stat
sample_Means
