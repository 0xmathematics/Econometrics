# add x-axis
axis(1,
at = c(-qvalue, 3.5 ,0, qvalue),
padj = 0.5,
labels = c(expression(Phi^-1~(0.05)),
expression( frac(  (bar(X)[n,0]~-~bar(Y)[m,0] )~-~(mu[1]~-~mu[2]) , sqrt(frac(sigma[1]^2, n) +frac(sigma[2]^2, m) )  )   ),
0,
expression(Phi^-1~(0.95))), cex.axis=1)
# shade p-value/2 region in Middle
polygon(x = c(-qvalue, seq(-qvalue, qvalue, 0.01), qvalue),
y = c(0, dnorm(seq(-qvalue, qvalue, 0.01)),0),
col = 'lightblue')
# shade p-value/2 region in left tail
polygon(x = c(-6, seq(-6, -qvalue, 0.01), -qvalue),
y = c(0, dnorm(seq(-6, -qvalue, 0.01)),0),
col = 'lightcoral')
# shade p-value/2 region in right tail
polygon(x = c(qvalue, seq(qvalue, 6, 0.01), 6),
y = c(0, dnorm(seq(qvalue, 6, 0.01)), 0),
col = 'lightcoral')
dev.off()
##########################################
## Confidence Interval 99 mean difference
##########################################
pdf("MFCI99.pdf")
pvalue = 0.995
qvalue = qnorm(pvalue)
# plot the standard normal density on the interval [-4,4]
curve(dnorm(x),
xlim = c(-4, 4),
main = '99% Confidence Interval ',
yaxs = 'i',
xlab = 'z',
ylab = '',
lwd = 2,
axes = 'F')
axis(1,
at = c(-qvalue, qvalue),
padj = 0.5,
labels = c(expression(Phi^-1~(0.005)),
expression(Phi^-1~(0.995))), cex.axis=0.9,tck =-0.02
)
# shade p-value/2 region in Middle
polygon(x = c(-qvalue, seq(-qvalue, qvalue, 0.01), qvalue),
y = c(0, dnorm(seq(-qvalue, qvalue, 0.01)),0),
col = 'lightblue')
# shade p-value/2 region in left tail
polygon(x = c(-6, seq(-6, -qvalue, 0.01), -qvalue),
y = c(0, dnorm(seq(-6, -qvalue, 0.01)),0),
col = 'lightcoral')
# shade p-value/2 region in right tail
polygon(x = c(qvalue, seq(qvalue, 6, 0.01), 6),
y = c(0, dnorm(seq(qvalue, 6, 0.01)), 0),
col = 'lightcoral')
segments(-qvalue, 0, x1 = qvalue, 0,
col = 'blue', lty = 'solid', lwd = 10)
mtext(text = expression(frac(  (bar(X)[n,0]~-~bar(Y)[m,0] )~-~(mu[1]~-~mu[2]) , sqrt(frac(sigma[1]^2, n) +frac(sigma[2]^2, m) )  )) , side = 1, line = 0.6, outer = T, at = 0,
adj = NA, padj = 0.5, cex = 0.9, col = 'blue')
dev.off()
##########################################
## P-Value mean Difference
##########################################
pdf("MFRpvalue.pdf")
pvalue = 0.95
qvalue = qnorm(pvalue)
# plot the standard normal density on the interval [-4,4]
curve(dnorm(x),
xlim = c(-4, 4),
main = 'P-Value for Mean Difference',
yaxs = 'i',
xlab = 'z',
ylab = '',
lwd = 2,
axes = 'F')
# add x-axis
axis(1,
at = c(-qvalue ,0, qvalue),
padj = 0.5,
labels = c(
expression(-frac(  (bar(X)[n,0]~-~bar(Y)[m,0] )~-~(mu[1]~-~mu[2]) , sqrt(frac(sigma[1]^2, n) +frac(sigma[2]^2, m) )  )),
0,
expression( frac(  (bar(X)[n,0]~-~bar(Y)[m,0] )~-~(mu[1]~-~mu[2]) , sqrt(frac(sigma[1]^2, n) +frac(sigma[2]^2, m) )  ))
),
cex.axis=1)
# shade p-value/2 region in Middle
polygon(x = c(-qvalue, seq(-qvalue, qvalue, 0.01), qvalue),
y = c(0, dnorm(seq(-qvalue, qvalue, 0.01)),0),
col = 'lightblue')
# shade p-value/2 region in left tail
polygon(x = c(-6, seq(-6, -qvalue, 0.01), -qvalue),
y = c(0, dnorm(seq(-6, -qvalue, 0.01)),0),
col = 'lightcoral')
# shade p-value/2 region in right tail
polygon(x = c(qvalue, seq(qvalue, 6, 0.01), 6),
y = c(0, dnorm(seq(qvalue, 6, 0.01)), 0),
col = 'lightcoral')
dev.off()
##########################################
## Can't reject 1% Mean Difference
##########################################
pdf("MF1Cant.pdf")
pvalue = 0.995
qvalue = qnorm(pvalue)
# plot the standard normal density on the interval [-4,4]
curve(dnorm(x),
xlim = c(-4, 4),
main = 'Can\'t Reject Null at 1% Level',
yaxs = 'i',
xlab = '',
ylab = '',
lwd = 2,
axes = 'F')
# add x-axis
axis(1,
at = c(-qvalue, 0.3 ,0, qvalue),
padj = 0.5,
labels = c(expression(Phi^-1~(0.005)),
expression( frac(  (bar(X)[n,0]~-~bar(Y)[m,0] )~-~(mu[1]~-~mu[2]) , sqrt(frac(sigma[1]^2, n) +frac(sigma[2]^2, m) )  )   ),
'',
expression(Phi^-1~(0.995))), cex.axis=1)
# shade p-value/2 region in Middle
polygon(x = c(-qvalue, seq(-qvalue, qvalue, 0.01), qvalue),
y = c(0, dnorm(seq(-qvalue, qvalue, 0.01)),0),
col = 'lightblue')
# shade p-value/2 region in left tail
polygon(x = c(-6, seq(-6, -qvalue, 0.01), -qvalue),
y = c(0, dnorm(seq(-6, -qvalue, 0.01)),0),
col = 'lightcoral')
# shade p-value/2 region in right tail
polygon(x = c(qvalue, seq(qvalue, 6, 0.01), 6),
y = c(0, dnorm(seq(qvalue, 6, 0.01)), 0),
col = 'lightcoral')
dev.off()
beta0 = 546.42
beta1 = -6.111
CS = 22
OLS_testscore = beta0 + beta0*CS
round(OLS_testscore, digits = 2)
beta0 = 546.42
beta1 = -6.111
CS = 22
OLS_testscore = beta0 + beta1*CS
round(OLS_testscore, digits = 2)
deltaCS = 23-19
deltaOLS_testscore = beta0 + beta1*deltaCS
round(deltaOLS_testscore, digits = 2)
beta0 = 546.42
beta1 = -6.111
CS = 22
OLS_testscore = beta0 + beta1*CS
round(OLS_testscore, digits = 2)
#change
deltaCS = 23-19
deltaOLS_testscore = beta0 + beta1*deltaCS
round(deltaOLS_testscore, digits = 2)
beta0 = 546.42
beta1 = -6.111
CS = 22
OLS_testscore = beta0 + beta1*CS
round(OLS_testscore, digits = 2)
#change
deltaCS = 23-19
deltaOLS_testscore = beta1*deltaCS
round(deltaOLS_testscore, digits = 2)
bar_CS = 22.47
bar_OLS_testscore = beta0 + beta1*bar_CS
round(bar_OLS_testscore, digits = 2)
5 - 0.3*3 -(1-0.3)*3
6.5 - 0.3*3 -(1-0.3)*3
SER = 12.1
R2 = 0.09
n = 93
SSR = SER*(n-2)
TSS = SSR/(1-R2)
sd_Y = sqrt(TSS/(n-1))
sd_Y
round(sd_Y, digits = 1)
SER^2
SER = 12.1
R2 = 0.09
n = 93
SSR = SER^2*(n-2)
TSS = SSR/(1-R2)
sd_Y = sqrt(TSS/(n-1))
sd_Y
round(sd_Y, digits = 1)
dtibble <- read_excel("data-2_25_2019-3_40 PM.xlsx", col_names = FALSE, col_types = "numeric")
df = data.frame(dtibble)
head(df)
setwd("~/Dropbox/Econometrics/R Emprical Analysis/HW4")
dtibble <- read_excel("data-2_25_2019-3_40 PM.xlsx", col_names = FALSE, col_types = "numeric")
df = data.frame(dtibble)
head(df)
library('readxl')
dtibble <- read_excel("data-2_25_2019-3_40 PM.xlsx", col_names = FALSE, col_types = "numeric")
df = data.frame(dtibble)
head(df)
head(df)
dtibble <- read_excel("data-2_25_2019-3_40 PM.xlsx", skip = 1, col_types = "numeric")
df = data.frame(dtibble)
head(df)
df['Height']
median(df['Height'])
df[,1]
df
median_Height = median(df[,2])
round(median_Height, digits = 2)
dtibble <- read_excel("data-2_25_2019-3_40 PM.xlsx", skip = 0, col_types = "numeric")
df = data.frame(dtibble)
head(df)
dtibble <- read_excel("data-2_25_2019-10_02 PM.xlsx", skip = 0, col_types = "numeric")
df = data.frame(dtibble)
head(df)
dtibble <- read_excel("data-2_25_2019-10_02 PM.xlsx", skip = 1, col_types = "numeric")
df = data.frame(dtibble)
head(df)
median_Height = median(df[,2])
round(median_Height, digits = 2)
df[,2]
attach(mtcars)
mtcars
order(mpg)
mtcars[order(mpg),]
order(mpg, cyl)
newdata <- mtcars[order(mpg, cyl),]
newdata
mtcars[order(mpg, cyl),]
df
df[Height]
df$Height
median_Height = median(df$Height)
round(median_Height, digits = 2)
df[order(Height),]
attach(df)
Height
order(df$Height)
df_sorted_Height = df[order(df$Height),]
df_sorted_Height
which(df['height']<=67)
which(df['Height']<=67)
rowIndex = which(df['Height']<=67)
df_leq67 = df[rowIndex,]
df_leq67
rowIndex = which(df['Height']<=67)
df_leq67 = df[rowIndex,]
avg_leq67 = mean(df_leq67$Earnings)
round(avg_leq67, digits = 2)
rowIndex = which(df['Height']>67)
df_g67 = df[rowIndex,]
avg_g67 = mean(df_leq67$Earnings)
round(avg_g67, digits = 2)
rowIndex = which(df['Height']>67)
df_g67 = df[rowIndex,]
avg_g67 = mean(df_g67$Earnings)
round(avg_g67, digits = 2)
diff_earning = avg_g67 -avg_leq67
round(diff_earning, digits = 2)
diff_earning = abs(avg_g67 -avg_leq67)
round(diff_earning, digits = 2)
df_g67
## 2008 mean diff between high school and graduates
mu1 = mean(df_g67$Earnings)
mu2 = mean(df_leq67$Earnings)
sd1 = sd(df_g67$Earnings)
sd2 = sd(df_leq67$Earnings)
n1 = nrow(df_g67)
n2 = nrow(df_leq67)
mu_diff = abs(mu1-mu2)
sd_diff = sqrt(sd1^2/n1 + sd2^2/n2)
percentile_975 = qnorm(0.975, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
percentile_975
CI_right = mu_diff +  sd_diff*percentile_975
CI_left = 0
round(c(CI_left,CI_right), digits = 2)
percentile_975
## 2008 mean diff between high school and graduates
mu1 = mean(df_g67$Earnings)
mu2 = mean(df_leq67$Earnings)
sd1 = sd(df_g67$Earnings)
sd2 = sd(df_leq67$Earnings)
n1 = nrow(df_g67)
n2 = nrow(df_leq67)
mu_diff = abs(mu1-mu2)
sd_diff = sqrt(sd1^2/n1 + sd2^2/n2)
percentile_975 = qnorm(0.975, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
percentile_975
CI_right = mu_diff +  sd_diff*percentile_975
CI_left = mu_diff -  sd_diff*percentile_975
round(c(CI_left,CI_right), digits = 2)
df
linearMod <- lm(Earnings ~ Height, data=df)
print(linearMod)
summary(linearMod)
linearMod$coefficients
linearMod$coefficients$Height
linearMod$coefficients
linearMod$coefficients[,1]
summaryLM = summary(linearMod)
summaryLM$coefficients
coefficients(linearMod)
fitted(linearMod)
predict(linearMod, 66)  # predict dis
summaryLM$coefficients
-641114.38 + 10315.95 * 66
?predict
testdata <- data.frame(Height = 66)
predicted_earning <- predict(linearMod,testdata)
predicted_earning
predicted_earning[,1]
predicted_earning[1]
typeof(predicted_earning)
round(predicted_earning,digits = 2)
predicted_earning$1
predicted_earning['1']
class(predicted_earning)
predicted_earning[1,1]
predicted_earning[1]
predicted_earning[2]
predicted_earning[0]
predicted_earning[1]
predicted_earning$
class(predicted_earning)
class(predicted_earning)
predicted_earning +1
as.numeric(predicted_earning)
predicted_earning = as.numeric(predicted_earning)
linearMod$coefficients
df
df['Height_cm'] = df$Height*2.54
df
# train the model with new regressor
linearMod <- lm(Earnings ~ Height_cm, data=df)
# show coefficients
print(linearMod)
summary(linearMod)
linearMod <- lm(Earnings ~ Height, data=df)
# show coefficients
print(linearMod)
round(c(CI_left,CI_right), digits = 2)
linearMod <- lm(Earnings ~ Height, data=df)
# show coefficients
print(linearMod)
df
summary(linearMod)$wts
linearMod <- lm(Earnings ~ Height_cm, data=df)
summary(linearMod)$wts
setwd("~/Dropbox/Econometrics/R Emprical Analysis/HW4")
library('readxl')
## set the working directory same as the
#setwd("replace this with the Directory Path where this file and the excel data file located")
setwd("~/Dropbox/Econometrics/R Emprical Analysis/HW4")
## load excel file
dtibble <- read_excel("data-2_25_2019-10_02 PM.xlsx", skip = 1, col_types = "numeric")
df = data.frame(dtibble)
head(df)
linearMod <- lm(Earnings ~ Height, data=df)
# show coefficients
print(linearMod)
# or
linearMod$coefficients
# show detailed results
summary(linearMod)
testdata <- data.frame(Height = 66)
predicted_earning <- predict(linearMod,testdata)  # predict distance
predicted_earning = as.numeric(predicted_earning)
round(predicted_earning,digits = 2)
linearMod$coefficients
beta = linearMod$coefficients
# show detailed results
round(beta, digits = 2)
df['Height_cm'] = df$Height*2.54
# train the model with new regressor
linearMod <- lm(Earnings ~ Height_cm, data=df)
# show coefficients
beta = linearMod$coefficients
round(beta, digits = 2)
summary(linearMod)
df$Earnings - mean(df$Earnings)
(df$Earnings - mean(df$Earnings))^2
linearMod$qr
summary(linearMod)
summary(linearMod)$Multiple R-squared
summary(linearMod)$r.squared
Rsquare = summary(linearMod)$r.squared
Rsquare = summary(linearMod)$r.squared
round(Rsquare, digits =4 )
TSS = sum((df$Earnings - mean(df$Earnings))^2 )
SSR = (1-Rsquare)*TSS
SER = SSR/(n-2)
round(SER, digits = 0)
n = nrow(df)
TSS = sum((df$Earnings - mean(df$Earnings))^2 )
SSR = (1-Rsquare)*TSS
SER = SSR/(n-2)
round(SER, digits = 0)
n
n = nrow(df)
TSS = sum((df$Earnings - mean(df$Earnings))^2 )
SSR = (1-Rsquare)*TSS
SER = SSR/(n-2)
round(SER, digits = 1)
n = nrow(df)
TSS = sum((df$Earnings - mean(df$Earnings))^2 )
SSR = (1-Rsquare)*TSS
SER = SSR/(n-2)
round(SER, digits = 2)
df$Earnings - mean(df$Earnings)
(df$Earnings - mean(df$Earnings))^2
summary(linearMod)
n = nrow(df)
TSS = sum((df$Earnings - mean(df$Earnings))^2 )
SSR = (1-Rsquare)*TSS
SER = sqrt(SSR/(n-2))
round(SER, digits = 2)
x = c(99,130,160)
y = 46 + 0.59* x
round(y, digits = 2)
x = 44
y = 46 + 0.59* x
round(y, digits = 2)
x = 44
delta_y = 0.59* x
round(y, digits = 2)
x = 44
delta_y = 0.59* x
round(delta_y, digits = 2)
dtibble <- read_excel("data-2_26_2019-3_49 AM.xlsx", skip = 1, col_types = "numeric")
df = data.frame(dtibble)
head(df)
df
df['Dist_mile'] = df$Dist*10
df
linearMod <- lm(Ed ~ Dist_mile, data=df)
## coefficients
Mod_coef = linearMod$coefficients
round(Mod_coef, digits = 3)
linearMod
## training the model
linearMod <- lm(Ed ~ Dist, data=df)
## coefficients
Mod_coef = linearMod$coefficients
round(Mod_coef, digits = 3)
testdata <- data.frame(Dist = 36)
predicted_educ <- predict(linearMod,testdata)  # predict distance
predicted_educ = as.numeric(predicted_educ)
round(predicted_educ,digits = 2)
linearMod <- lm(Ed ~ Dist, data=df)
## coefficients
Mod_coef = linearMod$coefficients
round(Mod_coef, digits = 3)
testdata <- data.frame(Dist = 3.6)
predicted_educ <- predict(linearMod,testdata)  # predict distance
predicted_educ = as.numeric(predicted_educ)
round(predicted_educ,digits = 2)
# prediction
testdata <- data.frame(Dist = 2)
predicted_educ <- predict(linearMod,testdata)  # predict distance
predicted_educ = as.numeric(predicted_educ)
round(predicted_educ,digits = 2)
# R square
Rsquare = summary(linearMod)$r.squared
round(Rsquare, digits =4 )
df
n = nrow(df)
TSS = sum((df$Ed - mean(df$Ed))^2 )
SSR = (1-Rsquare)*TSS
SER = sqrt(SSR/(n-2))
round(SER, digits = 2)
summary(linearMod)
n = nrow(df)
TSS = sum((df$Ed - mean(df$Ed))^2 )
SSR = (1-Rsquare)*TSS
SER = sqrt(SSR/(n-2))
round(SER, digits = 4)
summary(linearMod)
dtibble <- read_excel("data-2_26_2019-3_49 AM.xlsx", skip = 1, col_types = "numeric")
df = data.frame(dtibble)
head(df)
## training the model
linearMod <- lm(Ed ~ Dist, data=df)
Mod_coef = linearMod$coefficients
round(Mod_coef, digits = 3)
dtibble <- read_excel("data-2_26_2019-4_26 AM.xlsx", skip = 1, col_types = "numeric")
df = data.frame(dtibble)
head(df)
## training the model
linearMod <- lm(Ed ~ Dist, data=df)
## coefficients
Mod_coef = linearMod$coefficients
round(Mod_coef, digits = 3)
testdata <- data.frame(Dist = 36)
predicted_educ <- predict(linearMod,testdata)  # predict distance
predicted_educ = as.numeric(predicted_educ)
round(predicted_educ,digits = 2)
testdata <- data.frame(Dist = 3.6)
predicted_educ <- predict(linearMod,testdata)  # predict distance
predicted_educ = as.numeric(predicted_educ)
round(predicted_educ,digits = 2)
testdata <- data.frame(Dist = 2.6)
predicted_educ <- predict(linearMod,testdata)  # predict distance
predicted_educ = as.numeric(predicted_educ)
round(predicted_educ,digits = 2)
# R square
Rsquare = summary(linearMod)$r.squared
round(Rsquare, digits =4 )
n = nrow(df)
TSS = sum((df$Ed - mean(df$Ed))^2 )
SSR = (1-Rsquare)*TSS
SER = sqrt(SSR/(n-2))
round(SER, digits = 4)
## or from
summary(linearMod)
