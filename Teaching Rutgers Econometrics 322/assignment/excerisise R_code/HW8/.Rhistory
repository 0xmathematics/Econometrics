beta5_exper2 = -0.000186
X4_exp = 13
dahe = beta4_exp*(X4_exp+1) +beta5_exper2*(X4_exp+1)^2-
beta4_exp*(X4_exp) -beta5_exper2*(X4_exp)^2
round(dahe*100,digits = 2)
beta4_exp = 0.0138
sd_beta4_exp = 0.0012
beta5_exper2 = -0.000186
sd_beta5_exper2= 0.000025
X4_exp = 4
#one way
dahe = beta4_exp*(X4_exp+1) +beta5_exper2*(X4_exp+1)^2-
beta4_exp*(X4_exp) -beta5_exper2*(X4_exp)^2
round(dahe*100,digits = 2)
dahe = beta4_exp + 2*beta5_exper2*X4_exp
round(dahe*100,digits = 2)
beta4_exp = 0.0138
sd_beta4_exp = 0.0012
beta5_exper2 = -0.000186
sd_beta5_exper2= 0.000025
X4_exp = 4
#one way
dahe = beta4_exp*(X4_exp+1) +beta5_exper2*(X4_exp+1)^2-
beta4_exp*(X4_exp) -beta5_exper2*(X4_exp)^2
round(dahe*100,digits = 2)
# the other
dahe = beta4_exp + 2*beta5_exper2*X4_exp
round(dahe*100,digits = 2)
beta4_exp = 0.0138
sd_beta4_exp = 0.0012
beta5_exper2 = -0.000238
sd_beta5_exper2= 0.000025
X4_exp = 10
#one way
dahe = beta4_exp*(X4_exp+1) +beta5_exper2*(X4_exp+1)^2-
beta4_exp*(X4_exp) -beta5_exper2*(X4_exp)^2
round(dahe*100,digits = 2)
dahe = beta4_exp + 2*beta5_exper2*X4_exp
round(dahe*100,digits = 2)
# if exper increase by 1, how much ahe change
beta4_exp = 0.0138
sd_beta4_exp = 0.0012
beta5_exper2 = -0.000238
sd_beta5_exper2= 0.000025
#scenario A
X4_exp = 10
#one way
dahe = beta4_exp*(X4_exp+1) +beta5_exper2*(X4_exp+1)^2-
beta4_exp*(X4_exp) -beta5_exper2*(X4_exp)^2
daheA = 100*dahe
round(daheA,digits = 2)
# the other
dahe = beta4_exp + 2*beta5_exper2*X4_exp
round(dahe*100,digits = 2)
#scenario B
X4_exp = 10
#one way
dahe = beta4_exp*(X4_exp+1) +beta5_exper2*(X4_exp+1)^2-
beta4_exp*(X4_exp) -beta5_exper2*(X4_exp)^2
daheB = 100*dahe
round(daheB,digits = 2)
# if exper increase by 1, how much ahe change
beta4_exp = 0.0138
sd_beta4_exp = 0.0012
beta5_exper2 = -0.000238
sd_beta5_exper2= 0.000025
#scenario A
X4_exp = 4
#one way
dahe = beta4_exp*(X4_exp+1) +beta5_exper2*(X4_exp+1)^2-
beta4_exp*(X4_exp) -beta5_exper2*(X4_exp)^2
daheA = 100*dahe
round(daheA,digits = 2)
# the other
dahe = beta4_exp + 2*beta5_exper2*X4_exp
round(dahe*100,digits = 2)
#scenario B
X4_exp = 10
#one way
dahe = beta4_exp*(X4_exp+1) +beta5_exper2*(X4_exp+1)^2-
beta4_exp*(X4_exp) -beta5_exper2*(X4_exp)^2
daheB = 100*dahe
round(daheB,digits = 2)
# if exper increase by 1, how much ahe change
beta4_exp = 0.0138
sd_beta4_exp = 0.0012
beta5_exper2 = -0.000238
sd_beta5_exper2= 0.000025
#scenario A
X4_expA = 4
#one way
dahe = beta4_exp*(X4_expA+1) +beta5_exper2*(X4_expA+1)^2-
beta4_exp*(X4_expA) -beta5_exper2*(X4_expA)^2
daheA = 100*dahe
round(daheA,digits = 2)
# the other: an approximation for the first one
dahe = beta4_exp + 2*beta5_exper2*X4_expA
round(dahe*100,digits = 2)
#scenario B
X4_expB = 10
#one way
dahe = beta4_exp*(X4_expB+1) +beta5_exper2*(X4_expB+1)^2-
beta4_exp*(X4_expB) -beta5_exper2*(X4_expB)^2
daheB = 100*dahe
round(daheB,digits = 2)
# the other: an approximation for the first one
dahe = beta4_exp + 2*beta5_exper2*X4_expB
round(dahe*100,digits = 2)
var_diff= sd_beta4_exp^2*(X4_expB+1)^2 +sd_beta5_exper2^2*(X4_expB+1)^2^2 +
sd_beta4_exp^2*(X4_expB)^2 +sd_beta5_exper2^2*(X4_expB)^2^2 +
sd_beta4_exp^2*(X4_expA+1)^2 +sd_beta5_exper2^2*(X4_expA+1)^2^2 +
sd_beta4_exp^2*(X4_expA)^2 +sd_beta5_exper2^2*(X4_expA)^2^2
# if exper increase by 1, how much ahe change
beta4_exp = 0.0138
sd_beta4_exp = 0.0012
beta5_exper2 = -0.000238
sd_beta5_exper2= 0.000025
#scenario A
X4_expA = 4
#one way
dahe = beta4_exp*(X4_expA+1) +beta5_exper2*(X4_expA+1)^2-
beta4_exp*(X4_expA) -beta5_exper2*(X4_expA)^2
daheA = 100*dahe
round(daheA,digits = 2)
# the other: an approximation for the first one
dahe = beta4_exp + 2*beta5_exper2*X4_expA
round(dahe*100,digits = 2)
#scenario B
X4_expB = 10
#one way
dahe = beta4_exp*(X4_expB+1) +beta5_exper2*(X4_expB+1)^2-
beta4_exp*(X4_expB) -beta5_exper2*(X4_expB)^2
daheB = 100*dahe
round(daheB,digits = 2)
# the other: an approximation for the first one
dahe = beta4_exp + 2*beta5_exper2*X4_expB
round(dahe*100,digits = 2)
# t-statistics for the difference
var_diff= sd_beta4_exp^2*(X4_expB+1)^2 +sd_beta5_exper2^2*(X4_expB+1)^2^2 +
sd_beta4_exp^2*(X4_expB)^2 +sd_beta5_exper2^2*(X4_expB)^2^2 +
sd_beta4_exp^2*(X4_expA+1)^2 +sd_beta5_exper2^2*(X4_expA+1)^2^2 +
sd_beta4_exp^2*(X4_expA)^2 +sd_beta5_exper2^2*(X4_expA)^2^2
(daheB-daheA)/sqrt(var_diff)
diff_stat =(daheB-daheA)/sqrt(var_diff)
round(diff_stat,digits = 2)
# if exper increase by 1, how much ahe change
beta4_exp = 0.0142
sd_beta4_exp = 0.0012
beta5_exper2 = -0.000232
sd_beta5_exper2= 0.000024
#scenario A
X4_expA = 3
#one way
dahe = beta4_exp*(X4_expA+1) +beta5_exper2*(X4_expA+1)^2-
beta4_exp*(X4_expA) -beta5_exper2*(X4_expA)^2
daheA = 100*dahe
round(daheA,digits = 2)
#scenario B
X4_expB = 10
#one way
dahe = beta4_exp*(X4_expB+1) +beta5_exper2*(X4_expB+1)^2-
beta4_exp*(X4_expB) -beta5_exper2*(X4_expB)^2
daheB = 100*dahe
round(daheB,digits = 2)
# the other: an approximation for the first one
dahe = beta4_exp + 2*beta5_exper2*X4_expB
round(dahe*100,digits = 2)
diff_stat =(beta5_exper2-0)/sqrt(sd_beta5_exper2)
round(diff_stat,digits = 2)
beta5_exper2
diff_stat =(beta5_exper2-0)/sqrt(sd_beta5_exper2)
round(diff_stat,digits = 2)
diff_stat =(beta5_exper2-0)/sd_beta5_exper2
round(diff_stat,digits = 2)
#################
# parameters
################
beta0_intercept = 6.39
sd_beta0_intercept = 0.01
beta1_female = -0.46
sd_beta1_female = 0.05
#avg Earning for female
X1_female =1
Y = beta0_intercept + beta1_female*X1_female
Y_female = exp(Y)
round(Y_female, digits = 2)
#avg Earning for male
X1_female =0
Y = beta0_intercept + beta1_female*X1_female
Y_male = exp(Y)
round(Y_male, digits = 2)
#avg Earning for female
X1_female =1
Y = beta0_intercept + beta1_female*X1_female
Y_female = exp(Y)
round(Y, digits = 2)
X1_female =0
Y = beta0_intercept + beta1_female*X1_female
Y_male = exp(Y)
round(Y, digits = 2)
Y_male-Y_female
t_stat_female = (beta1_female-0)/sd_beta1_female
round(t_stat_female, digits = 2)
beta2_marketV = 0.37
sd_beta2_marketV = 0.004
beta3_return =0.004
sd_beta3_return = 0.003
dmarketV = 1.63
dY = dmarketV*beta2_marketV
round(dY, digits = 2)
beta1_female_original = beta1_female
beta1_female_new= -0.28
sigmaRatio_u_x = 0.55
(beta1_female_original-beta1_female_new)/sigmaRatio_u_x
beta1_female_original = beta1_female
beta1_female_new= -0.28
sigmaRatio_u_x = 0.55
rho_x_u = (beta1_female_original-beta1_female_new)/sigmaRatio_u_x
round(rho_x_u, digits = 2)
beta1_female_original = beta1_female
beta1_female_new= -0.28
sigmaRatio_u_x = 0.55
rho_x_u = (beta1_female_original-beta1_female_new)/sigmaRatio_u_x
round(rho_x_u, digits = 3)
################
beta0_intercept = 6.51
sd_beta0_intercept = 0.01
beta1_female = -0.43
sd_beta1_female = 0.05
#avg Earning for male
X1_female =0
Y = beta0_intercept + beta1_female*X1_female
Y_male = exp(Y)
round(Y_male, digits = 2)
#avg Earning for female
X1_female =1
Y = beta0_intercept + beta1_female*X1_female
Y_female = exp(Y)
round(Y_female, digits = 2)
Y_male-Y_female
t_stat_female = (beta1_female-0)/sd_beta1_female
round(t_stat_female, digits = 2)
beta2_marketV = 0.37
sd_beta2_marketV = 0.004
beta3_return =0.004
sd_beta3_return = 0.003
dmarketV = 4.48
dY = dmarketV*beta2_marketV
round(dY, digits = 2)
# omitted variable bias formula
beta1_female_original = beta1_female
beta1_female_new= -0.28
sigmaRatio_u_x = 0.46
rho_x_u = (beta1_female_original-beta1_female_new)/sigmaRatio_u_x
round(rho_x_u, digits = 3)
setwd("~/Dropbox/Econometrics/R Emprical Analysis/HW8")
library('readxl')
##############################
## Loading data
##############################
## load excel file
dtibble <- read_excel("cps08.xlsx", col_types = "numeric")
df = data.frame(dtibble)
head(df)
linearMod1 <- lm(ahe ~ female+bachelor+age, data=df)
summary(linearMod1)
summary(linearMod1)$coef
df['log_ahe'] = log(df$ahe)
df
# Re run the multiple regression
linearMod2 <- lm(log_ahe ~ female+bachelor+age, data=df)
summary(linearMod2)
summary(linearMod2)$coef
colnames(df)
# add a new column 'log_age' which sotre the value of log(age) to the original data frame
df['log_age'] = log(df$age)
# Re run the multiple regression
linearMod3 <- lm(log_ahe ~ female+bachelor+log_age, data=df)
summary(linearMod3)
summary(linearMod3)$coef
1/35*100
dahe = 1/35*100*0.80390509
dahe
dahe = 1/36*100*0.80390509
round(dahe,digits = 2)
dahe = 1/35*100*0.80390509
round(dahe,digits = 2)
head(df)
(df$age)^2
head(df)
df['age2'] = (df$age)^2
head(df)
linearMod4 <- lm(ahe ~ female+bachelor+age+age2, data=df)
summary(linearMod4)
summary(linearMod4)$coef
summary(linearMod4)$coefficients
linearMod4$coefficients
X1_female = 1
X2_bachelor = 1
X3_age = 40
X = c(1, X1_female,X2_bachelor,X3_age)
Y_ahe = linearMod4$coefficients %*% X
round(Y_ahe,digits = 2)
linearMod4$coefficients
X
X1_female = 1
X2_bachelor = 1
X3_age = 40
X = c(1, X1_female,X2_bachelor,X3_age)
Y_ahe = t(linearMod4$coefficients) %*% X
round(Y_ahe,digits = 2)
X1_female = 1
X2_bachelor = 1
X3_age = 40
X = c(1, X1_female,X2_bachelor,X3_age)
Y_ahe = sum(linearMod4$coefficients * X)
round(Y_ahe,digits = 2)
linearMod4$coefficients
X1_female = 1
X2_bachelor = 1
X3_age = 40
X4_age2 = 40^2
X = c(1, X1_female,X2_bachelor,X3_age)
Y_ahe = linearMod4$coefficients %*% X
round(Y_ahe,digits = 2)
t(linearMod4$coefficients) %*% X
X1_female = 1
X2_bachelor = 1
X3_age = 40
X4_age2 = 40^2
X = c(1, X1_female,X2_bachelor,X3_age,X4_age2)
Y_ahe = linearMod4$coefficients %*% X
round(Y_ahe,digits = 2)
summary(linearMod4)$coef
head(df)
# Restricted multiple regression
linearMod_r <- lm(ahe ~ female+bachelor, data=df)
# UnRestricted multiple regression
linearMod_u <- lm(ahe ~ female+bachelor+age+age2, data=df)
SSR_R = sum(summary(linearMod_r)$residuals^2)
SSR_U = sum(summary(linearMod_u)$residuals^2)
n = nrow(df)
p = 4
d = 2
F_stat = (SSR_R- SSR_U)/d / (SSR_U/(n-p-1))
q95 = qf(0.95,2, n-p-1 )
F_stat>q95
F_stat
round(F_stat, digits = 1)
row1 = r(1,1,1,1)
colnames(df)
X = df[,c("bachelor","female","age","age2" )]
X
row1 = c(0,0,1,0)
row2 = c(0,0,0,1)
A = rbind(row1,row2)
A
A = matrix(rbind(row1,row2))
A
d = 2
p = 4
X = df[,c("bachelor","female","age","age2" )]
row1 = c(0,0,1,0)
row2 = c(0,0,0,1)
A = matrix(rbind(row1,row2),nrow =d, ncol =p )
A
linearMod <- lm(ahe ~ female+bachelor+age+age2, data=df)
linearMod$coefficients
linearMod$coefficients['age']
linearMod$coefficients['age2']
beta3_age = linearMod$coefficients['age']
beta4_age2 =linearMod$coefficients['age2']
summry(linearMod)
summary(linearMod)
summary(linearMod)$ser
summary(linearMod)
summary(linearMod)$rse
summary(linearMod)
summary(linearMod)$sigma
sigma2 = summary(linearMod)$sigma^2
sigma2
A
X
ones(nrows(df))
vec_ones = rep(1, nrows(df))
nrow(df)
vec_ones = rep(1, nrow(df))
X = cbind( vec_ones ,df[,c("female","bachelor","age","age2" )])
X
# beta_hat of interest
linearMod <- lm(ahe ~ female+bachelor+age+age2, data=df)
beta_hat = linearMod$coefficients
beta_hat
A
row1 = c(0,0,0,1,0)
row2 = c(0,0,0,0,1)
A = matrix(rbind(row1,row2),nrow =d, ncol =p )
a = c(0,0)
# constraint matrix A
row1 = c(0,0,0,1,0)
row2 = c(0,0,0,0,1)
A = matrix(rbind(row1,row2),nrow =d, ncol =p+1 )
a = c(0,0)
A
A %*% beta_hat
linearMod$coefficients
t(A %*% beta_hat)
t(A %*% beta_hat-a) %*% solve( A%*%  solve(sigma2* t(X)%*%X) %*% t(A)  ) %*% (A %*% beta_hat-a)/d
X
t(X)
X
nrow(df)
X = matrix(X, nrow = nrow(df), ncol = p+1)
X
X
X =  cbind( vec_ones ,df[,c("female","bachelor","age","age2" )])
X
type(X)
types(X)
typeof(X)
X.as.matrix
list.as.matrix(X)
as.matrix(X)
X
X = as.matrix(X)
typeof(X)
X
X = matrix(X, nrow = nrow(df), ncol = p+1)
X
colnames(df)
d = 2  #number of constraint in Null hypothesis
p = 4  #number of regressor
# data matrix X
vec_ones = rep(1, nrow(df))
X =  cbind( vec_ones ,df[,c("female","bachelor","age","age2" )])
X
typeof(X)
X = as.matrix(X)
typeof(X)
X
row1 = c(0,0,0,1,0)
row2 = c(0,0,0,0,1)
A = matrix(rbind(row1,row2),nrow =d, ncol =p+1 )
a = c(0,0)
# beta_hat
linearMod <- lm(ahe ~ female+bachelor+age+age2, data=df)
beta_hat = linearMod$coefficients
sigma2 = summary(linearMod)$sigma^2
t(X)%*%X
t(A %*% beta_hat-a) %*% solve( sigma2*A%*%solve( t(X)%*%X) %*% t(A)  ) %*% (A %*% beta_hat-a)/d
F_stat
F_stat_WaldForm == F_stat
F_stat_WaldForm =
t(A %*% beta_hat-a) %*% solve( sigma2*A%*%solve( t(X)%*%X) %*% t(A)  ) %*% (A %*% beta_hat-a)/d
F_stat_WaldForm == F_stat
F_stat_WaldForm
as.numeric(F_stat_WaldForm)
as.numeric(F_stat_WaldForm) == F_stat
F_stat
F_stat_WaldForm
F_stat
df
colnames(df)
df['female_age'] =  df$female * df$age
head(df)
linearMod <- lm(log_ahe ~ female+bachelor+age+female_age, data=df)
summary(linearMod)
df['college_age'] =  df$bachelor * df$age
head(df)
linearMod <- lm(log_ahe ~ female+bachelor+age+college_age, data=df)
summary(linearMod)
linearMod$coefficients
X1_female = 1
X2_bachelor = 1
X3_age = 40
X4_college_age = X3_age*X2_bachelor
X = c(1, X1_female,X2_bachelor,X3_age,X4_college_age)
linearMod$coefficients %*% X
Y_log_ahe = linearMod$coefficients %*% X
round(Y_log_ahe,digits = 2)
p = 1
n=287
SER = 15.51
SSR = SER^2*(n-p-1)
newSER = sqrt( 2*SSR/(2*n-p-1)   )
round(newSER, digits = 2)
sd_beta0 = 16.2
sd_beta1 = 12.2
sd_beta0_n = sd_beta0/SER*newSER
sd_beta1_n = sd_beta1/SER*newSER
round(sd_beta0_n, digits = 2)
round(sd_beta1_n, digits = 2)
sd_beta0_n = sd_beta0/SER*newSER/2
sd_beta1_n = sd_beta1/SER*newSER/2
round(sd_beta0_n, digits = 2)
round(sd_beta1_n, digits = 2)
sd_beta0_n = sd_beta0/SER*newSER/sqrt(2)
sd_beta1_n = sd_beta1/SER*newSER/sqrt(2)
round(sd_beta0_n, digits = 2)
round(sd_beta1_n, digits = 2)
p = 1
n=131
SER = 15.11
SSR = SER^2*(n-p-1)
newSER = sqrt( 2*SSR/(2*n-p-1)   )
round(newSER, digits = 2)
sd_beta0 = 15.3
sd_beta1 = 13.2
sd_beta0_n = sd_beta0/SER*newSER/sqrt(2)
sd_beta1_n = sd_beta1/SER*newSER/sqrt(2)
round(sd_beta0_n, digits = 2)
round(sd_beta1_n, digits = 2)
