add = TRUE)
legend("topleft",c("Sample Mean Histogram","Normal Distribution"),fill=c("steelblue","red"),cex = 0.5 )
# Plot the Normalized Sample Mean together with Standard Normal Distribution
# Normalize Sample mean
Nsample_Means = (sample_Means-E)/(sd/sqrt(Sample_Size[i]))
# Plot the density histogram for Sample Means of reps many of repetitions
hist(Nsample_Means,
col = "steelblue" ,
freq = FALSE,
breaks = 200,
xlab = 'Normalized Sample Mean',
main = 'Normalized Sample Mean Histogram and Standard Normal Distribution',cex.main=0.75)
# draw the standard Normal Distribution
curve(dnorm(x, mean = 0, sd = 1),
col = "red",
lwd = "2",
add = TRUE)
legend("topleft",c("Sample Mean Histogram","Normal Distribution"),fill=c("steelblue","red"),cex = 0.5 )
# The underlying population follows Binomial(n,p)
N = 10000000
n_Trials = 40
p = 0.2
# randomly generate N samples from the underlying population
X = rbinom(n=N, size = n_Trials, prob=p)
E = n_Trials*p # Theoretical Expectation for Binomial Distribution
Var = n_Trials*p*(1-p) # Theoretical Expectation for Binomial Distribution
#sd = as.integer(sqrt(Var)) # Theoretical standard deviation
sd = sqrt(Var) # Theoretical standard deviation
# draw the histogram of N samples randomly draw
# from the underlying population distribution Normal(mu, sigma^2)
hist(X,
col = "steelblue" ,
prob = FALSE,
breaks = seq(0,n_Trials,1),
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
# draw the the underlying population distribution Binomial(n,p)
x = seq(0,n_Trials,1)
lines(x,dbinom(x,n_Trials,p)* N ,col="red")
legend("topright",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
pnorm(0)
50%
qnorm(0.5)
qnorm(0.9)
qnorm(0.01)
qnorm(0.05)
qnorm(0.10)
qnorm(0.95)
qnorm(0.975)
qnorm(0.995)
install.packages("AER")
1+1
5*4
100/25
2^2
exp(1)
exp(4)
log(1)
log(exp(1))
log(exp(2))
sqrt(4)
4^(1/2)
pi
sin(pi/2)
cos(pi/2)
round(cos(pi/2) ,3)
round(6.123234 ,3)
round(6.123234 ,4)
round(6.123234 ,1)
round(6.123234 ,1)
round(6.123234 ,1)
a = 6.123234
a = 6.123234
a
a
round(6.123234 ,1)
round(a ,1)
a = pi
round(a ,1)
a
round(a ,1)
round(a ,2)
round(a ,3)
a <- 6.123234
N <- 26.42
N
b = 1:10
b
c <- 20:15
c
d <- seq(1, 5, by=0.5)
d
e <- seq(0, 10, length=5)
e
f <- rep(0, 5)
f
4:6
1:3
x <- rnorm(5)
x <- rnorm(5) # Standard normal random variables
x
0.6^10
dbinom(10,10,0.6)
0.6^10
(1-0.6)^10
dbinom(0,10,0.6)
dbinom(7,10,0.6)
x = 1
dbinom(x,10,0.6)
x = 2
dbinom(x,10,0.6)
x = 10
dbinom(x,10,0.6)
x = 11
dbinom(x,10,0.6)
x = -1
dbinom(x,10,0.6)
dbinom(0, size = 10, prob = 0.6)
dbinom(0,10,0.6)
pbinom(10, 10, 0.6 )
pbinom(-1, 10, 0.6 )
0.4^10
pbinom(0, 10, 0.6 )
dbinom(0, 10, 0.6 ) + dbinom(1, 10, 0.6 )
dbinom(0, 10, 0.6 ) + dbinom(1, 10, 0.6 )
pbinom(1, 10, 0.6 )
pbinom(9, 10, 0.6 )
pbinom(10, 10, 0.6 )
dbinom(3, 4 ,0.6 )
dbinom(0, 1 ,0.6 )
dbinom(1, 1 ,0.6 )
dbinom(0, 1 ,0.6 )
# uniform
a = 0
b = 1
x_hat = 0.5
# density at x_hat
dunif(x_hat,a,b )
# cdf at x_hat
punif(x_hat,a,b )
# uniform
a = 10
b = 17
x_hat = 16
# density at x_hat
dunif(x_hat,a,b )
# cdf at x_hat
punif(x_hat,a,b )
dunif(x_hat,a,b )
# uniform
a = 10
b = 17
x_hat = 9
# density at x_hat
dunif(x_hat,a,b )
punif(x_hat,a,b )
a = 10
b = 17
x_hat = 100
# density at x_hat
dunif(x_hat,a,b )
x_hat
# cdf at x_hat
punif(x_hat,a,b )
mu = 0
sigma_square = 9
sigma = sqrt(sigma_square)
sigma_square
sigma
dnorm(x_hat,mu,sigma)
# x follows N( 0, 9)
# normal
mu = 0
sigma_square = 9
sigma = sqrt(sigma_square)
x_hat = 2
dnorm(x_hat,mu,sigma)
pnorm(x_hat,mu,sigma)
# cumulative prob mass
pnorm(x_hat,mu,sigma)
q1 = pnorm(x_hat,mu,sigma)
round(q1,3   )
round(0.0386, 3)
Q2 = 0.1768 + 0.1352 + 0.1845
round(Q2,3 )
Q2
Q2 = 0.1768 + 0.1352 + 0.1845
round(Q2,3 )
Q2
round(Q2,3 )
Q3 = 0.0549/ (0.0386+ 0.0549+0.1018 )
round(Q3,3 )
E_X_square =  1* ( 0.0386 + 0.1322+ 0.1768) + 4*( 0.0549+0.0202+0.1352) + 9*(0.1018+0.1558+0.1845)
E_X_square
1:70
c(1:30)
dice = c(1:30)
sample(dice,1)
sample(dice,1)
sample(dice,1)
sample(dice,1)
sample(dice,1)
sample(dice,1)
sample(dice,1)
sample(dice,1)
sample(dice,1)
sample(dice,6)
first = sample(dice,1)
first
# randomly pick one number
first = sample(dice,1)
first
# randomly pick one number
first = sample(dice,1)
first
sample(dice,3)
population = sample(dice)
population
cluster = split(population, 1:3)
cluster
cluster = split(population, 1:10)
cluster
num = sample(1:10,1)
num
cluster[num]
################################
# The underlying population follows Normal(mu, sigma^2)
N = 10000000
mu = 5
sigma = 4
# randomly generate N samples from the underlying population
X = rnorm(N, mean = mu, sd = sigma)
E = mu # Theoretical Expectation for Normal(mu, sigma^2)
Var = sigma^2 # Theoretical Expectation for Normal(mu, sigma^2)
sd = sigma # Theoretical standard deviation
# Plot the histogram of N samples
# randomly draw from the underlying population distribution Normal(mu, sigma^2)
hist(X,
col = "steelblue" ,
freq = FALSE,
breaks = 50,
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
# draw the the underlying population distribution Normal(mu, sigma^2)
x = seq(range(X)[1], range(X)[2], by = diff(range(X))/50 )
curve(dnorm(x, mean = mu, sd = sigma),
col = "red",
lwd = "2",
add = TRUE)
legend("topleft",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
################################
# The underlying population follows Normal(mu, sigma^2)
N = 10000000
mu = 5
sigma = 4
# randomly generate N samples from the underlying population
X = rnorm(N, mean = mu, sd = sigma)
E = mu # Theoretical Expectation for Normal(mu, sigma^2)
Var = sigma^2 # Theoretical Expectation for Normal(mu, sigma^2)
sd = sigma # Theoretical standard deviation
# Plot the histogram of N samples
# randomly draw from the underlying population distribution Normal(mu, sigma^2)
hist(X,
col = "steelblue" ,
freq = FALSE,
breaks = 50,
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
# draw the the underlying population distribution Normal(mu, sigma^2)
x = seq(range(X)[1], range(X)[2], by = diff(range(X))/50 )
curve(dnorm(x, mean = mu, sd = sigma),
col = "red",
lwd = "2",
add = TRUE)
legend("topleft",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
Sample_Size = 2^(0:23)
# initialize a vector with 24 entries to store the sample mean value with each sample size candidiate
Sample_Mean = numeric(length = length(Sample_Size))
# calculate the sample mean for each sample size candidiate
for (i in 1:length(Sample_Size)) {
Sample_X = sample(X, size = Sample_Size[i] , replace = FALSE, prob = NULL)
Mean_X = mean(Sample_X)
Sample_Mean[i]=Mean_X
}
# plot the sample mean for each sample size candidiate
plot(Sample_Size, Sample_Mean, log = "x", ylim =c(mu-sigma,mu+sigma),
xlab ='Sample Size', ylab = 'Sample Mean', col = 'steelblue',
main = 'Sample Mean Converge to Population Mean',cex.main=0.75)
# Plot the Theoretical Expectation or Population Mean
abline(a = NULL, b = NULL, h = mu, col = 'red')
legend("topright",c("Sample Mean","Population Mean"),fill=c("steelblue","red"),cex = 0.5 )
################################
# The underlying population follows Normal(mu, sigma^2)
N = 10000000
mu = 5
sigma = 4
# randomly generate N samples from the underlying population
X = rnorm(N, mean = mu, sd = sigma)
E = mu # Theoretical Expectation for Normal(mu, sigma^2)
Var = sigma^2 # Theoretical Expectation for Normal(mu, sigma^2)
sd = sigma # Theoretical standard deviation
hist(X,
col = "steelblue" ,
freq = FALSE,
breaks = 50,
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
x = seq(range(X)[1], range(X)[2], by = diff(range(X))/50 )
curve(dnorm(x, mean = mu, sd = sigma),
col = "red",
lwd = "2",
add = TRUE)
legend("topleft",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
# the following is the sample size vector contains 24 candidiate sample size
Sample_Size = 2^(0:23)
# initialize a vector with 24 entries to store the sample mean value with each sample size candidiate
Sample_Mean = numeric(length = length(Sample_Size))
# calculate the sample mean for each sample size candidiate
for (i in 1:length(Sample_Size)) {
Sample_X = sample(X, size = Sample_Size[i] , replace = FALSE, prob = NULL)
Mean_X = mean(Sample_X)
Sample_Mean[i]=Mean_X
}
# plot the sample mean for each sample size candidiate
plot(Sample_Size, Sample_Mean, log = "x", ylim =c(mu-sigma,mu+sigma),
xlab ='Sample Size', ylab = 'Sample Mean', col = 'steelblue',
main = 'Sample Mean Converge to Population Mean',cex.main=0.75)
# Plot the Theoretical Expectation or Population Mean
abline(a = NULL, b = NULL, h = mu, col = 'red')
legend("topright",c("Sample Mean","Population Mean"),fill=c("steelblue","red"),cex = 0.5 )
# The underlying population follows Binomial(n,p)
N = 10000000
n_Trials = 40
p = 0.2
# randomly generate N samples from the underlying population
X = rbinom(n=N, size = n_Trials, prob=p)
E = n_Trials*p # Theoretical Expectation for Binomial Distribution
Var = n_Trials*p*(1-p) # Theoretical Expectation for Binomial Distribution
sd = as.integer(sqrt(Var)) #  Theoretical standard deviation round to the nearest integer
# Plot the histogram of N samples
E
hist(X,
col = "steelblue" ,
prob = FALSE,
breaks = seq(0,n_Trials,1),
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
# draw the the underlying population distribution Binomial(n,p)
x = seq(0,n_Trials,1)
lines(x,dbinom(x,n_Trials,p)* N ,col="red")
legend("topright",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
Sample_Size = 2^(0:23)
# initialize a vector with 24 entries to store the sample mean value with each sample size candidiate
Sample_Mean = numeric(length = length(Sample_Size))
# calculate the sample mean for each sample size candidiate
for (i in 1:length(Sample_Size)) {
Sample_X = sample(X, size = Sample_Size[i] , replace = FALSE, prob = NULL)
Mean_X = mean(Sample_X)
Sample_Mean[i]=Mean_X
}
# plot the sample mean for each sample size candidiate
plot(Sample_Size, Sample_Mean, log = "x", ylim =c(E-sd,E+sd),
xlab ='Sample Size', ylab = 'Sample Mean', col = 'steelblue',
main = 'Sample Mean Converge to Population Mean',cex.main=0.75)
# Plot the Theoretical Expectation or Population Mean
abline(a = NULL, b = NULL, h = E, col = 'red')
legend("topright",c("Sample Mean","Population Mean"),fill=c("steelblue","red"),cex = 0.5 )
Sample_Size = 2^(0:23)
# initialize a vector with 24 entries to store the sample mean value with each sample size candidiate
Sample_Mean = numeric(length = length(Sample_Size))
# calculate the sample mean for each sample size candidiate
for (i in 1:length(Sample_Size)) {
Sample_X = sample(X, size = Sample_Size[i] , replace = FALSE, prob = NULL)
Mean_X = mean(Sample_X)
Sample_Mean[i]=Mean_X
}
# plot the sample mean for each sample size candidiate
plot(Sample_Size, Sample_Mean, log = "x", ylim =c(E-sd,E+sd),
xlab ='Sample Size', ylab = 'Sample Mean', col = 'steelblue',
main = 'Sample Mean Converge to Population Mean',cex.main=0.75)
# Plot the Theoretical Expectation or Population Mean
abline(a = NULL, b = NULL, h = E, col = 'red')
legend("topright",c("Sample Mean","Population Mean"),fill=c("steelblue","red"),cex = 0.5 )
# The underlying population follows t-distribution(df)
N = 10000000
df = 4 # df should be great than 2, otherwise theoretical variance does not exist
# randomly generate N samples from the underlying population
X = rt(N, df, ncp = 0)
E = 0# Theoretical Expectation for  t Distribution
Var = ifelse(df > 2, df/(df-2), Inf)  # Theoretical Expectation for Binomial Distribution
sd = sqrt(Var) # Theoretical standard deviation
# draw the histogram of N samples randomly draw
# from the underlying population distribution t(df)
hist(X,
col = "steelblue" ,
freq = FALSE,
breaks = 200,
xlim= c(-10,10),
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
# draw the the underlying population distribution t(df)
x = seq(range(X)[1], range(X)[2], by = diff(range(X))/50 )
curve(dt(x,df),
col = "red",
lwd = "2",
add = TRUE)
legend("topright",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
# suppose we only use a small propotion of the total sample to estimate the population mean of the
# underlying population mu. The estimator is the sample mean: 1\n sum x_i
# We claim that as the size of sample increase, the sample mean converge to the population mean
# the following is the sample size vector contains 24 candidiate sample size
Sample_Size = 2^(0:23)
# initialize a vector with 24 entries to store the sample mean value with each sample size candidiate
Sample_Mean = numeric(length = length(Sample_Size))
# calculate the sample mean for each sample size candidiate
for (i in 1:length(Sample_Size)) {
Sample_X = sample(X, size = Sample_Size[i] , replace = FALSE, prob = NULL)
Mean_X = mean(Sample_X)
Sample_Mean[i]=Mean_X
}
# plot the sample mean for each sample size candidiate
plot(Sample_Size, Sample_Mean, log = "x", ylim =c(E-sd,E+sd),
xlab ='Sample Size', ylab = 'Sample Mean', col = 'steelblue',
main = 'Sample Mean Converge to Population Mean',cex.main=0.75)
# Plot the Theoretical Expectation or Population Mean
abline(a = NULL, b = NULL, h = E, col = 'red')
legend("topright",c("Sample Mean","Population Mean"),fill=c("steelblue","red"),cex = 0.5 )
# The underlying population follows f(df1, df2)
#df1 = 9
#df2 = 7
# 8,6
N = 10000000
df1 = 5
df2 = 5 # df2 should be great 2 otherwise theoretical expectation does not exist
# if df2 less than 5, theoretical variance does not exist
# randomly generate N samples from the underlying population
X = rf(N, df1, df2)
E = df2/(df2-2)# Theoretical Expectation for  f  Distribution
Var =2*df2^2*(df1+df2-2)/(df1*(df2-2)^2*(df2-4)) # Theoretical Expectation for Binomial Distribution
sd = sqrt(Var) # Theoretical standard deviation
# draw the histogram of N samples randomly draw
# from the underlying population distribution f(df1, df2)
hist(X,
col = "steelblue" ,
freq = FALSE,
breaks = 5000,
xlim= c(0,20),
main = 'Sample Histogram and Underlying Distribution',cex.main=0.75)
# draw the the underlying population distribution f(df1, df2)
x = seq(range(X)[1], range(X)[2], by = diff(range(X))/50 )
curve(df(x,df1,df2),
col = "red",
lwd = "2",
add = TRUE)
legend("topright",c("Sample Histogram","Underlying Distribution"),fill=c("steelblue","red"),cex = 0.5 )
# suppose we only use a small propotion of the total sample to estimate the population mean of the
# underlying population mu. The estimator is the sample mean: 1\n sum x_i
# We claim that as the size of sample increase, the sample mean converge to the population mean
# the following is the sample size vector contains 24 candidiate sample size
Sample_Size = 2^(0:23)
# initialize a vector with 24 entries to store the sample mean value with each sample size candidiate
Sample_Mean = numeric(length = length(Sample_Size))
# calculate the sample mean for each sample size candidiate
for (i in 1:length(Sample_Size)) {
Sample_X = sample(X, size = Sample_Size[i] , replace = FALSE, prob = NULL)
Mean_X = mean(Sample_X)
Sample_Mean[i]=Mean_X
}
# plot the sample mean for each sample size candidiate
plot(Sample_Size, Sample_Mean, log = "x", ylim =c(E-sd,E+sd),
xlab ='Sample Size', ylab = 'Sample Mean', col = 'steelblue',
main = 'Sample Mean Converge to Population Mean',cex.main=0.75)
# Plot the Theoretical Expectation or Population Mean
abline(a = NULL, b = NULL, h = E, col = 'red')
legend("topright",c("Sample Mean","Population Mean"),fill=c("steelblue","red"),cex = 0.5 )
setwd("~/Dropbox/Econometrics  R Emprical Analysis/assignment/Assignment11/fertility assignment 11")
df <- read.csv("Fertility.csv")
head(df)
head(df)
OLS_model_1 <- lm(morekids ~ samesex , data = df)
summary(OLS_model_1)
summary(OLS_model_1)$f
IV_SupCur <- ivreg(work ~ morekids | samesex, data = Fertility)
OLS_model_1 <- lm(morekids ~ samesex , data = df)
summary(OLS_model_1)$f
summary(OLS_model_1)
setwd("~/Dropbox/Econometrics  R Emprical Analysis/assignment/Assignment10")
df <- read.csv("Guns.csv")
head(df)
Software_Panel_Data_Reg_Model <- plm(log(violent) ~ law+prisoners+density+income+population+black+white+male ,
data = df,
index = c("state", "year"),
effect = "twoways",
model = "within")
summary(Software_Panel_Data_Reg_Model)
library(plm)
Software_Panel_Data_Reg_Model <- plm(log(violent) ~ law+prisoners+density+income+population+black+white+male ,
data = df,
index = c("state", "year"),
effect = "twoways",
model = "within")
summary(Software_Panel_Data_Reg_Model)
coeftest(Software_Panel_Data_Reg_Model, vcov. = vcovHC, type = "HC0")
Software_Panel_Data_Reg_Model <- plm(log(violent) ~ law+prisoners+density+income+population+black+white+male ,
data = df,
index = c("state", "year"),
effect = "twoways",
model = "within")
coeftest(Software_Panel_Data_Reg_Model, vcov. = vcovHC, type = "HC0")
library(AER)
coeftest(Software_Panel_Data_Reg_Model, vcov. = vcovHC, type = "HC0")
OLS_model_1 <- lm(morekids ~ samesex , data = df)
summary(OLS_model_1)
setwd("~/Dropbox/Econometrics  R Emprical Analysis/assignment/Assignment10")
OLS_model_2 <- lm(log(violent) ~ law+prisoners+density+income+population+black+white+male, data = df)
summary(OLS_model_2)
summary(OLS_model_2)
coeftest(OLS_model_2, vcov. = vcovHC,type = "HC0")
